import type { Node, PipeNode, TildeNode, TickNode, TextNode, TagNode, UnderscoreNode, StarNode, DoubleBracketsNode, OrderedListItemNode, UnorderedListItemNode, OrderedListNode, UnorderedListNode, AlgorithmNode, OpaqueTagNode, CommentNode } from './node-types';
export declare class Emitter {
    str: string;
    constructor();
    emit(node: Node | Node[]): string;
    static emit(node: Node | Node[]): string;
    emitNode(node: Node | Node[]): void;
    emitAlgorithm(algorithm: AlgorithmNode): void;
    emitOrderedList(ol: OrderedListNode): void;
    emitUnorderedList(ul: UnorderedListNode): void;
    emitListItem(li: OrderedListItemNode | UnorderedListItemNode): void;
    emitStar(node: StarNode): void;
    emitUnderscore(node: UnderscoreNode): void;
    emitFieldOrSlot(node: DoubleBracketsNode): void;
    emitTag(tag: OpaqueTagNode | CommentNode | TagNode): void;
    emitText(text: TextNode): void;
    emitTick(node: TickNode): void;
    emitTilde(node: TildeNode): void;
    emitFragment(fragment: Node[]): void;
    emitPipe(pipe: PipeNode): void;
    wrapFragment(tagName: string, fragment: Node[], attrs?: string): void;
}
