declare type ActualOmit<T, K extends string> = T extends unknown ? Omit<T, K> : never;
export declare type Unlocated<T extends {
    location: LocationRange;
}> = ActualOmit<T, 'location'>;
export declare type Position = {
    line: number;
    column: number;
    offset: number;
};
export declare type LocationRange = {
    start: Position;
    end: Position;
};
export declare type EOFToken = {
    name: 'EOF';
    done: true;
    location: LocationRange;
};
export declare type Format = 'star' | 'underscore' | 'tick' | 'pipe' | 'tilde';
export declare type FormatToken = {
    name: Format;
    contents: string;
    location: LocationRange;
};
export declare type ParabreakToken = {
    name: 'parabreak';
    contents: string;
    location: LocationRange;
};
export declare type LinebreakToken = {
    name: 'linebreak';
    contents: string;
    location: LocationRange;
};
export declare type WhitespaceToken = {
    name: 'whitespace';
    contents: string;
    location: LocationRange;
};
export declare type DoubleBracketsToken = {
    name: 'double-brackets';
    contents: string;
    location: LocationRange;
};
export declare type TextToken = {
    name: 'text';
    contents: string;
    location: LocationRange;
};
export declare type CommentToken = {
    name: 'comment';
    contents: string;
    location: LocationRange;
};
export declare type OpaqueTagToken = {
    name: 'opaqueTag';
    contents: string;
    location: LocationRange;
};
export declare type TagToken = {
    name: 'tag';
    contents: string;
    location: LocationRange;
};
export declare type UnorderedListToken = {
    name: 'ul';
    contents: string;
    location: LocationRange;
};
export declare type OrderedListToken = {
    name: 'ol';
    contents: string;
    location: LocationRange;
};
export declare type AttrToken = {
    name: 'attr';
    key: string;
    value: string;
    location: LocationRange;
};
export declare type Token = EOFToken | FormatToken | ParabreakToken | LinebreakToken | WhitespaceToken | DoubleBracketsToken | TextToken | CommentToken | TagToken | UnorderedListToken | OrderedListToken | OpaqueTagToken;
export declare type NotEOFToken = Exclude<Token, EOFToken>;
export declare type OpaqueTagNode = {
    name: 'opaqueTag';
    contents: string;
    location: LocationRange;
};
export declare type TagNode = {
    name: 'tag';
    contents: string;
    location: LocationRange;
};
export declare type CommentNode = {
    name: 'comment';
    contents: string;
    location: LocationRange;
};
export declare type AlgorithmNode = {
    name: 'algorithm';
    contents: OrderedListNode;
    location: LocationRange;
};
export declare type TextNode = {
    name: 'text';
    contents: string;
    location: LocationRange;
};
export declare type StarNode = {
    name: 'star';
    contents: (TextNode | CommentNode | TagNode)[];
    location: LocationRange;
};
export declare type UnderscoreNode = {
    name: 'underscore';
    contents: string;
    location: LocationRange;
};
export declare type TickNode = {
    name: 'tick';
    contents: (TextNode | CommentNode | TagNode)[];
    location: LocationRange;
};
export declare type TildeNode = {
    name: 'tilde';
    contents: (TextNode | CommentNode | TagNode)[];
    location: LocationRange;
};
export declare type PipeNode = {
    name: 'pipe';
    nonTerminal: string;
    params: string;
    optional: boolean;
    contents: null;
    location: LocationRange;
};
export declare type DoubleBracketsNode = {
    name: 'double-brackets';
    contents: string;
    location: LocationRange;
};
export declare type FormatNode = StarNode | UnderscoreNode | TickNode | TildeNode | PipeNode;
export declare type UnorderedListNode = {
    name: 'ul';
    indent: number;
    contents: UnorderedListItemNode[];
    location: LocationRange;
};
export declare type OrderedListNode = {
    name: 'ol';
    indent: number;
    start: number;
    contents: OrderedListItemNode[];
    location: LocationRange;
};
export declare type UnorderedListItemNode = {
    name: 'unordered-list-item';
    contents: FragmentNode[];
    sublist: ListNode | null;
    attrs: {
        key: string;
        value: string;
        location: LocationRange;
    }[];
    location: LocationRange;
};
export declare type OrderedListItemNode = {
    name: 'ordered-list-item';
    contents: FragmentNode[];
    sublist: ListNode | null;
    attrs: {
        key: string;
        value: string;
        location: LocationRange;
    }[];
    location: LocationRange;
};
export declare type FragmentNode = TextNode | FormatNode | CommentNode | TagNode | OpaqueTagNode | DoubleBracketsNode;
export declare type ListNode = UnorderedListNode | OrderedListNode;
export declare type Node = OpaqueTagNode | TagNode | CommentNode | AlgorithmNode | TextNode | DoubleBracketsNode | StarNode | UnderscoreNode | TickNode | TildeNode | PipeNode | UnorderedListNode | OrderedListNode | UnorderedListItemNode | OrderedListItemNode;
export {};
