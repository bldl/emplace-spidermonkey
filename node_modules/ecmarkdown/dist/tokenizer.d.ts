import type { Unlocated, Token, AttrToken, Position } from './node-types';
export declare class Tokenizer {
    str: string;
    _eof: boolean;
    pos: number;
    queue: Token[];
    _newline: boolean;
    _lookahead: Token[];
    previous: Token | undefined;
    line: number;
    column: number;
    constructor(str: string);
    scanDigits(): string;
    scanWhitespace(): string;
    scanEscape(): string;
    scanChars(): string;
    scanToEndTag(endTag: string): string;
    tryScanFieldOrSlot(): string | undefined;
    tryScanTag(): RegExpMatchArray | undefined;
    tryScanComment(): string | undefined;
    tryScanListItemAttributes(): AttrToken[];
    matchToken(): void;
    getLocation(): Position;
    enqueue(tok: Unlocated<Token>, pos: Position): void;
    dequeue(): import("./node-types").EOFToken | import("./node-types").FormatToken | import("./node-types").ParabreakToken | import("./node-types").LinebreakToken | import("./node-types").WhitespaceToken | import("./node-types").DoubleBracketsToken | import("./node-types").TextToken | import("./node-types").CommentToken | import("./node-types").OpaqueTagToken | import("./node-types").TagToken | import("./node-types").UnorderedListToken | import("./node-types").OrderedListToken | undefined;
    peek(dist?: number): Token;
    next(): Token;
    locate(tok: Unlocated<Token>, startPos: Position): asserts tok is Token;
    locate(tok: Unlocated<AttrToken>, startPos: Position): asserts tok is AttrToken;
    expect(name: Token['name']): void;
    raise(message: string, pos: Position): void;
}
