/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { Cancelable } from '@esfx/cancelable';
import { DiagnosticMessages } from "./diagnostics";
import { CommentTrivia, HtmlTrivia, Trivia } from './nodes';
import { SyntaxKind } from "./tokens";
/** {@docCategory Parse} */
export declare class Scanner {
    readonly text: string;
    readonly filename: string;
    private readonly cancelToken?;
    private readonly len;
    private pos;
    private startPos;
    private tokenPos;
    private token;
    private tokenValue;
    private tokenFlags;
    private trivia;
    private lastTrivia;
    private diagnostics;
    private insignificantIndentLength;
    private significantIndentLength;
    private currentIndentLength;
    private proseStartToken;
    constructor(filename: string, text: string, diagnostics: DiagnosticMessages, cancelable?: Cancelable);
    getPos(): number;
    getLen(): number;
    getStartPos(): number;
    getTokenPos(): number;
    getToken(): SyntaxKind;
    getTokenText(): string;
    getTokenValue(): string;
    getTokenIsUnterminated(): boolean;
    getDiagnostics(): DiagnosticMessages;
    getTrivia(): Trivia[] | undefined;
    /** @deprecated */
    getHtmlTrivia(): Trivia[] | undefined;
    isIndented(): boolean;
    isLineContinuation(): boolean;
    hasPrecedingIndent(): boolean;
    hasPrecedingDedent(): boolean;
    hasPrecedingNewLine(): boolean;
    hasPrecedingLineTerminator(): boolean;
    hasPrecedingBlankLine(): boolean;
    private hasPrecedingNonWhiteSpaceTrivia;
    private triviaHasPrecedingLineTerminator;
    private triviaHasPrecedingBlankLine;
    private triviaHasPrecedingWhiteSpaceTrivia;
    private isStartOfFile;
    private setTokenAsUnterminated;
    private setHasPrecedingLineTerminator;
    private setHasPrecedingBlankLine;
    private setHasPrecedingIndent;
    private setHasPrecedingDedent;
    private setIsLineContinuation;
    private setHasPrecedingNonWhiteSpaceTrivia;
    private resetHasPrecedingNonWhiteSpaceTrivia;
    private setTriviaHasPrecedingBlankLine;
    private setTriviaHasPrecedingWhiteSpaceTrivia;
    private resetTriviaHasPrecedingWhiteSpaceTrivia;
    private resetTriviaFlags;
    resetIndent(): void;
    speculate<T>(callback: () => T, isLookahead: boolean): T;
    scan(): SyntaxKind;
    scanRange<T>(pos: number, cb: () => T): T;
    private peekChar;
    private scanLine;
    private skipLineTerminator;
    private skipWhiteSpace;
    private scanProse;
    private nextLineIsProse;
    private finishLastTrivia;
    private recordTrivia;
    private scanSingleLineCommentTrivia;
    private scanMultiLineCommentTrivia;
    private scanHtmlTrivia;
    private scanHtmlComment;
    private expectCharacter;
    private matchCharacter;
    private scanCharacter;
    private scanCharacterEntity;
    private scanString;
    private scanEscapeSequence;
    private scanHexDigit;
    private scanHexDigits;
    private scanNumber;
    private getIdentifierToken;
}
export declare function skipTrivia(text: string, pos: number, end: number, htmlTrivia?: HtmlTrivia[], commentTrivia?: CommentTrivia[]): number;
export declare function scanHtmlTrivia(text: string, pos: number, end: number): HtmlTrivia[] | undefined;
export declare function decodeHtmlEntities(text: string): string;
