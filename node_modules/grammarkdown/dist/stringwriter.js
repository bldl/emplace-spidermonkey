"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringWriter = void 0;
const os_1 = require("os");
/** {@docCategory Emit} */
class StringWriter {
    constructor(eol = os_1.EOL) {
        this._text = "";
        this._depth = 0;
        this._indents = ["", "    "];
        this._flags = 0;
        this._character = 0;
        this._line = 0;
        this._eol = eol;
    }
    get size() {
        let size = this._text.length;
        if (this._flags & 3 /* AnyLineRequested */) {
            const len = this._eol.length;
            size += len;
            if (this._flags & 2 /* BlankLineRequested */) {
                size += len;
            }
        }
        return size;
    }
    get line() {
        let line = this._line;
        if (this._flags & 3 /* AnyLineRequested */) {
            line++;
            if (this._flags & 2 /* BlankLineRequested */) {
                line++;
            }
        }
        return line;
    }
    get character() {
        let character = this._character;
        if (this._flags & 3 /* AnyLineRequested */)
            character = 0;
        if (this._flags & 4 /* IndentRequested */)
            character += this._depth * this._indents[1].length;
        return character;
    }
    indent() {
        this._depth++;
    }
    dedent() {
        this._depth--;
    }
    write(text) {
        if (text) {
            this.flushNewLine();
            this.flushIndent();
            let lineStart = 0;
            for (let i = 0; i < text.length; i++) {
                const ch = text.charCodeAt(i);
                if (ch === 13 /* CarriageReturn */) {
                    this._line++;
                    this._character = 0;
                    if (i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* LineFeed */) {
                        i++;
                    }
                    lineStart = i;
                }
                else if (ch === 10 /* LineFeed */) {
                    this._line++;
                    this._character = 0;
                    lineStart = i;
                }
            }
            this._text += text;
            this._character += text.length - lineStart;
        }
    }
    commitLine() {
        this.flushNewLine();
    }
    writeln(text) {
        this.write(text);
        this._flags |= 1 /* NewLineRequested */;
    }
    /* @internal */
    writeBlank() {
        this._flags |= 2 /* BlankLineRequested */;
    }
    toString() {
        let text = this._text;
        if (this._flags & 3 /* AnyLineRequested */) {
            text += this._eol;
            if (this._flags & 2 /* BlankLineRequested */) {
                text += this._eol;
            }
        }
        return text;
    }
    clone() {
        const writer = new StringWriter(this._eol);
        writer._text = this._text;
        writer._depth = this._depth;
        writer._indents = this._indents.slice();
        writer._flags = this._flags;
        writer._character = this._character;
        writer._line = this._line;
        return writer;
    }
    flushNewLine() {
        if (this._flags & 3 /* AnyLineRequested */) {
            this._text += this._eol;
            this._line++;
            if (this._flags & 2 /* BlankLineRequested */) {
                this._text += this._eol;
                this._line++;
            }
            this._character = 0;
            this._flags &= ~(3 /* AnyLineRequested */);
            this._flags |= 4 /* IndentRequested */;
        }
    }
    flushIndent() {
        if (this._flags & 4 /* IndentRequested */ || this._text.length === 0 && this._depth > 0) {
            let indent = this._indents[this._depth];
            if (!indent && this._depth > 0) {
                indent = this._indents[this._depth] = this._indents[this._depth - 1] + this._indents[1];
            }
            this._text += indent;
            this._character += indent.length;
            this._flags &= ~4 /* IndentRequested */;
        }
    }
}
exports.StringWriter = StringWriter;
//# sourceMappingURL=stringwriter.js.map