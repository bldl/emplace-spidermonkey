/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { CancelToken } from "@esfx/async-canceltoken";
import { Cancelable } from "@esfx/cancelable";
import { CoreAsyncHost } from "./host";
import { DiagnosticMessages } from "./diagnostics";
import { CompilerOptions } from "./options";
import { Binder, BindingTable } from "./binder";
import { Checker, Resolver } from "./checker";
import { SourceFile } from "./nodes";
import { Emitter } from "./emitter";
/**
 * The primary service used to interact with one or more Grammarkdown {@link SourceFile|SourceFiles}.
 * {@docCategory Compiler}
 */
export declare class Grammar {
    private _bindings;
    private _rootNames;
    private _parseState;
    private _parseShared;
    private _innerBinder;
    private _innerChecker;
    private _innerResolver;
    private _innerEmitter;
    private _lineOffsetMap;
    private _writeFileFallback;
    /**
     * The {@link CompilerOptions} used by the grammar.
     */
    readonly options: Readonly<CompilerOptions>;
    /**
     * The {@link CoreAsyncHost} the grammar uses to interact with the file system.
     */
    readonly host: CoreAsyncHost;
    /**
     * The diagnostic messages produced by the grammar.
     */
    readonly diagnostics: DiagnosticMessages;
    /**
     * @param rootNames The names of the root files used by the grammar.
     * @param options The {@link CompilerOptions} used by the grammar.
     * @param host The [Host](xref:hosts) the grammar uses to interact with the file system.
     */
    constructor(rootNames: Iterable<string>, options?: CompilerOptions, host?: CoreAsyncHost);
    /**
     * Indicates whether the grammar has been parsed.
     */
    get isParsed(): boolean;
    /**
     * Indicates whether the grammar has been bound.
     */
    get isBound(): boolean;
    /**
     * Gets the source files parsed by the grammar.
     * @throws `Error` - Grammar has not yet been parsed.
     */
    get sourceFiles(): readonly SourceFile[];
    /**
     * Gets the root files parsed by the grammar.
     * @throws `Error` - Grammar has not yet been parsed.
     */
    get rootFiles(): readonly SourceFile[];
    /**
     * Gets the resolver used to resolve references to bound nodes.
     * @throws `Error` - Grammar has not yet been bound.
     */
    get resolver(): Resolver;
    /**
     * Gets the {@link Binder} used to bind the grammar.
     */
    protected get binder(): Binder;
    /**
     * Gets the {@link Checker} used to check the grammar.
     */
    protected get checker(): Checker;
    /**
     * Gets the {@link Emitter} used to emit the grammar.
     */
    protected get emitter(): Emitter;
    /**
     * Converts a string containing Grammarkdown syntax into output based on the provided options.
     * @param content The Grammarkdown source text to convert.
     * @param options The {@link CompilerOptions} used by the grammar.
     * @param hostFallback An optional host to use as a fallback for file system operations.
     * @param cancelable A cancelable object that can be used to abort the operation.
     */
    static convert(content: string, options?: CompilerOptions & {
        file?: string;
    }, hostFallback?: CoreAsyncHost, cancelable?: Cancelable): Promise<string>;
    /**
     * Gets the {@link SourceFile} parsed for the provided file path.
     * @param file The path to the source file.
     * @returns The {@link SourceFile} for the provided path, if one was parsed; otherwise, `undefined`.
     */
    getSourceFile(file: string): SourceFile | undefined;
    /**
     * Asynchronously parses the root files provided to the grammar.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` that is settled when the operation has completed.
     */
    parse(cancelable?: Cancelable): Promise<void>;
    private _parseWorker;
    /**
     * Asynchronously binds each file in the grammar. Will also parse the grammar if it has not yet been parsed.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` that is settled when the operation has completed.
     */
    bind(cancelable?: Cancelable): Promise<void>;
    /**
     * Asynchronously checks each file in the grammar. Will also parse and bind the grammar if it has not yet been parsed or bound.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` that is settled when the operation has completed.
     */
    check(sourceFile?: SourceFile, cancelable?: Cancelable): Promise<void>;
    /**
     * Asynchronously emits each file in the grammar. Will also parse, bind, and check the grammar if it has not yet been parsed, bound, or checked.
     * @param sourceFile The {@link SourceFile} to emit. If not provided, this method will generate output for all root files.
     * @param writeFile An optional callback used to write the output. If not provided, this method will emit output via this grammar's {@link Grammar.host|host}.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` that is settled when the operation has completed.
     */
    emit(sourceFile?: SourceFile, writeFile?: (file: string, output: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>;
    private _emitOne;
    /**
     * Asynchronously emits the provided file in the grammar as a string. Will also parse, bind, and check the grammar if it has not yet been parsed, bound, or checked.
     * @param sourceFile The {@link SourceFile} to emit.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` for the emit output that is settled when the operation has completed.
     */
    emitString(sourceFile: SourceFile, cancelable?: Cancelable): Promise<string>;
    /**
     * When overridden in a derived class, creates a {@link Binder} to be used by this grammar.
     * @param options The options to pass on to the {@link Binder}.
     * @virtual
     */
    protected createBinder(options: Readonly<CompilerOptions>): Binder;
    /**
     * When overridden in a derived class, creates a {@link Checker} to be used by this grammar.
     * @param options The options to pass on to the {@link Checker}.
     * @virtual
     */
    protected createChecker(options: Readonly<CompilerOptions>): Checker;
    /**
     * When overridden in a derived class, creates a {@link Resolver} to be used by this grammar.
     * @param bindings A {@link BindingTable} used by the resolver to resolve references to nodes.
     * @virtual
     */
    protected createResolver(bindings: BindingTable): Resolver;
    /**
     * When overridden in a derived class, creates an {@link Emitter} to be used by this grammar.
     * @param options The options to pass on to the {@link Emitter}.
     * @virtual
     */
    protected createEmitter(options: CompilerOptions): Emitter;
    /**
     * When overridden in a derived class, asynchronously reads the contents of the provided file.
     * @param file The file to read.
     * @param cancelToken A cancellation token that can be used by the caller to abort the operation.
     * @returns A `Promise` for either a `string` containing the content if the file could be read, or `undefined` if the file could not be read.
     * @virtual
     */
    protected readFile(file: string, cancelToken?: CancelToken): Promise<string | undefined> | string | undefined;
    /**
     * When overridden in a derived class, asynchronously writes a file to the host.
     * @param file The path to the file.
     * @param text The contents of the file.
     * @param cancelToken A cancellation token that can be used by the caller to abort the operation.
     * @returns A `Promise` that is settled when the operation completes.
     * @virtual
     */
    protected writeFile(file: string, content: string, cancelToken?: CancelToken): Promise<void>;
    private _resolveFile;
    private _normalizeFile;
    private _processRootFile;
    private _processFile;
    private _processImports;
    private _getSourceFileNoResolve;
    private _setSourceFileNoResolve;
}
