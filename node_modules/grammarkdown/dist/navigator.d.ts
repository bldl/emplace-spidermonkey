/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { SourceFile, Node } from "./nodes";
import { Position } from "./types";
import { SyntaxKind } from "./tokens";
/**
 * Navigates the syntax-tree of a {@link SourceFile}.
 * {@docCategory Compiler}
 *
 * @remarks
 * Nodes in Grammarkdown's syntax tree are immutable and do not maintain pointers to their parents.
 * This can make traversing through a document somewhat difficult. The NodeNavigator class is intended
 * to improve this process by providing an API that can traverse a syntax tree starting from the root.
 *
 * A NodeNavigator focuses on a specific {@link Node} within a syntax tree, and maintains the
 * path to that node from the root. Various methods on the navigator move the focus, allowing you to
 * navigate to any other node within the syntax tree.
 */
export declare class NodeNavigator {
    private _sourceFile;
    private _nodeStack;
    private _edgeStack;
    private _arrayStack;
    private _offsetStack;
    private _currentDepth;
    private _currentNode;
    private _currentEdge;
    private _currentOffset;
    private _currentArray;
    private _parentNode;
    private _hasAnyChildren;
    private _leadingTokens;
    private _trailingTokens;
    private _tokenOffset;
    private _copyOnNavigate;
    /**
     * @param sourceFile The {@link SourceFile} to use as the root of the navigator.
     */
    constructor(sourceFile: SourceFile);
    /**
     * @param other A {@link NodeNavigator} whose position information is used to create this navigator.
     */
    constructor(other: NodeNavigator);
    /**
     * Creates a copy of this {@link NodeNavigator} at the same position.
     */
    clone(): NodeNavigator;
    /**
     * Gets the root {@link SourceFile} node for this navigator.
     */
    getRoot(): SourceFile;
    /**
     * Gets the parent {@link Node} of the {@link Node} the navigator is currently focused on.
     */
    getParent(): Node<SyntaxKind> | undefined;
    /**
     * Gets the {@link Node} the navigator is currently focused on.
     */
    getNode(): Node<SyntaxKind>;
    /**
     * If the {@link Node} the navigator is currently focused on is a {@link TextContentNode}, returns the `text` of the node;
     * Otherwise, returns `undefined`.
     */
    getTextContent(): string | undefined;
    /**
     * Gets the {@link SyntaxKind} of the {@link Node} the navigator is currently focused on.
     */
    getKind(): SyntaxKind;
    /**
     * Gets the string representation of the {@link SyntaxKind} of the {@link Node} the navigator is currently focused on.
     */
    getKindString(): string;
    /**
     * Gets the name of the property on the parent {@link Node} the navigator is currently focused on.
     */
    getName(): string | undefined;
    /**
     * Gets the containing node array of {@link Node} the navigator is currently focused on.
     */
    getArray(): readonly Node<SyntaxKind>[] | undefined;
    /**
     * Gets the ordinal offset within the containing node array of {@link Node} the navigator is currently focused on.
     */
    getOffset(): number;
    /**
     * Gets the current depth within the syntax-tree of the current focus of the navigator.
     */
    getDepth(): number;
    /**
     * Returns a value indicating whether the focus of the navigator points to a {@link Node} in an array.
     */
    isArray(): boolean;
    /**
     * Returns a value indicating whether the navigator is focused on a leading token of the actual current node.
     */
    isLeadingToken(): boolean;
    /**
     * Returns a value indicating whether the navigator is focused on a trailing token of the actual current node.
     */
    isTrailingToken(): boolean;
    /**
     * Returns a value indicating whether the focus of the navigator points to either a {@link Token}, {@link TextContentNode}, or {@link InvalidSymbol} (as long as that `InvalidSymbol` has no trailing tokens).
     */
    isToken(): boolean;
    /**
     * Creates an iterator for the ancestors of the focused {@link Node}.
     * @param predicate An optional callback that can be used to filter the ancestors of the node.
     */
    ancestors(predicate?: (ancestor: Node) => boolean): IterableIterator<Node>;
    /**
     * Creates an iterator for the parse tree ancestors of the focused {@link Node}.
     * @param kind The {@link SyntaxKind} that any yielded ancestor must match.
     */
    ancestors(kind: SyntaxKind): IterableIterator<Node>;
    /**
     * Creates an iterator for the parse tree children of the focused {@link Node}.
     * @param predicate An optional callback that can be used to filter the children of the node.
     * @remarks This does not account for tokens not included in the parse tree.
     */
    children(predicate?: (child: Node) => boolean): IterableIterator<Node>;
    /**
     * Creates an iterator for the parse tree children of the focused {@link Node}.
     * @param kind The {@link SyntaxKind} that any yielded child must match.
     * @remarks This does not account for tokens not included in the parse tree.
     */
    children(kind: SyntaxKind): IterableIterator<Node>;
    /**
     * Creates an iterator for the tokens of the focused {@link Node}.
     * @param predicate An optional callback that can be used to filter the tokens of the node.
     */
    tokens(predicate?: (token: Node) => boolean): IterableIterator<Node>;
    /**
     * Creates an iterator for the tokens of the focused {@link Node}.
     * @param kind The {@link SyntaxKind} that any yielded token must match.
     */
    tokens(kind: SyntaxKind): IterableIterator<Node>;
    /**
     * Determines whether the focused {@link Node} has an ancestor that matches the supplied predicate.
     * @param predicate An optional callback used to filter the ancestors of the node.
     * @returns `true` if the focused {@link Node} contains an ancestor that matches the supplied predicate; otherwise, `false`.
     */
    hasAncestor(predicate?: (ancestor: Node) => boolean): boolean;
    /**
     * Determines whether the focused {@link Node} has an ancestor that matches the supplied predicate.
     * @param predicate An optional callback used to filter the ancestors of the node.
     * @returns `true` if the focused {@link Node} contains an ancestor that matches the supplied predicate; otherwise, `false`.
     */
    hasAncestor(kind: SyntaxKind): boolean;
    /**
     * Determines whether the focused {@link Node} has any children that match the supplied predicate.
     * @param predicate An optional callback that can be used to filter the children of the node.
     * @returns `true` if the focused {@link Node} contains a child that matches the supplied predicate; otherwise, `false`.
     * @remarks This does not account for tokens not included in the parse tree.
     */
    hasChildren(predicate?: (child: Node) => boolean): boolean;
    /**
     * Determines whether the focused {@link Node} has any children with the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that at least one child must match.
     * @returns `true` if the focused {@link Node} contains a matching child; otherwise, `false`.
     * @remarks This does not account for tokens not included in the parse tree.
     */
    hasChildren(kind: SyntaxKind): boolean;
    /**
     * Determines whether the focused {@link Node} matches the supplied predicate.
     * @param predicate A callback used to match the focused {@link Node}.
     * @returns `true` if the focused {@link Node} matches; otherwise, `false`.
     */
    isMatch(predicate: (node: Node) => boolean): boolean;
    /**
     * Determines whether the focused {@link Node} matches the supplied {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the focused {@link Node} must match.
     * @returns `true` if the focused {@link Node} matches; otherwise, `false`.
     */
    isMatch(kind: SyntaxKind): boolean;
    /**
     * Determines whether this navigator is focused on the same location within the tree as another navigator.
     * @param other The other navigator.
     * @returns `true` if both navigators are focused on the same location within the tree; otherwise, `false`.
     */
    isSamePosition(other: NodeNavigator): boolean;
    /**
     * Moves the focus of this navigator to the same position within the syntax tree as another navigator.
     * @param other The other navigator.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveTo(other: NodeNavigator): boolean;
    /**
     * Moves the focus of the navigator to the root of the syntax tree.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToRoot(): boolean;
    /**
     * Moves the focus of the navigator to the parent {@link Node} of the focused {@link Node}.
     * @param predicate An optional callback that determines whether the focus should move to the parent node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToParent(predicate?: (parent: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the parent {@link Node} of the focused {@link Node}.
     * @param kind The required {@link SyntaxKind} of the parent node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToParent(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the nearest ancestor matching the supplied predicate. If the current node
     * matches the predicate, the focus does not change.
     * @param predicate A callback used to match an ancestor.
     * @returns `true` if the current node matched the predicate or the navigator's focus changed; otherwise, `false`.
     */
    moveToAncestorOrSelf(predicate: (ancestorOrSelf: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the nearest ancestor matching the supplied predicate. If the current node
     * matches the predicate, the focus does not change.
     * @param kind The {@link SyntaxKind} that the focused {@link Node} or one of its ancestors must match.
     * @returns `true` if the current node matched the predicate or the navigator's focus changed; otherwise, `false`.
     */
    moveToAncestorOrSelf(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the nearest ancestor matching the supplied predicate.
     * @param predicate A callback used to match an ancestor.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToAncestor(predicate: (ancestor: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the nearest ancestor matching the supplied {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the ancestor must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToAncestor(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the parent of the focused {@link Node} if that parent is a {@link SourceElement}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToSourceElement(): boolean;
    /**
     * Moves the focus of the navigator to the parent of the focused {@link Node} if that parent is either a {@link Parameter} or a {@link Production}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToDeclaration(): boolean;
    /**
     * Moves the focus of the navigator to the nearest {@link Identifier}.
     * @returns `true` if the current node is an {@link Identifier} or the navigator's focus changed; otherwise, `false`.
     * @remarks
     * The "nearest {@link Identifier}" is determined using the following rules:
     * <ul>
     * <li>If the focus or its nearest ancestor is a {@link Parameter}, move to the `name` of the {@link Parameter}.</li>
     * <li>If the focus or its nearest ancestor is an {@link Argument}, move to the `name` of the {@link Argument}.</li>
     * <li>If the focus or its nearest ancestor is a {@link Nonterminal}, move to the `name` of the {@link Nonterminal}.</li>
     * <li>If the focus or its nearest ancestor is a {@link LexicalGoalAssertion}, move to the `symbol` of the of the {@link LexicalGoalAssertion}.</li>
     * <li>If the focus or its nearest ancestor is a {@link Define}, move to the `key` of the {@link Define}.</li>
     * <li>If the focus or its nearest ancestor is a {@link Constraints}, move to the `name` of the of the first {@link Argument} of the {@link Constraints}.</li>
     * <li>If the focus is not within the `body` of a {@link Production} and the focus or its nearest ancestor is a {@link Production}, move to the `name` of the {@link Production}.</li>
     * </ul>
     */
    moveToName(): boolean;
    /**
     * Moves the focus of the navigator to the first child of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstChild(): boolean;
    /**
     * Moves the focus of the navigator to the first child of the focused {@link Node} with the provided property name.
     * @param name The name of the property on the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstChild(name: string): boolean;
    /**
     * Moves the focus of the navigator to the first child of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a child node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstChild(predicate: (child: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the first child of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the child must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstChild(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the last child of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastChild(): boolean;
    /**
     * Moves the focus of the navigator to the last child of the focused {@link Node} with the provided property name.
     * @param name The name of the property on the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastChild(name: string): boolean;
    /**
     * Moves the focus of the navigator to the last child of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a child node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastChild(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the last child of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the child must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastChild(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the first element of the containing array of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstElement(predicate?: (element: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the first element of the containing array of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the element must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstElement(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the previous element in the containing array of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousElement(predicate?: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the previous element in the containing array of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the element must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousElement(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the next element in the containing array of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextElement(predicate?: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the next element in the containing array of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the element must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextElement(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the last element of the containing array of the focused {@link Node} matching the supplied predicate.
     * @param predicate A callback used to match a node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastElement(predicate?: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the last element of the containing array of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the element must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastElement(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the first sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstSibling(): boolean;
    /**
     * Moves the focus of the navigator to the first sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstSibling(name: string): boolean;
    /**
     * Moves the focus of the navigator to the first sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstSibling(predicate: (sibling: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the first sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstSibling(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the previous sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousSibling(): boolean;
    /**
     * Moves the focus of the navigator to the previous sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousSibling(name: string): boolean;
    /**
     * Moves the focus of the navigator to the previous sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousSibling(predicate: (sibling: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the previous sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousSibling(kind: SyntaxKind): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasPreviousSibling(): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasPreviousSibling(name: string): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasPreviousSibling(predicate: (sibling: Node) => boolean): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the previous sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasPreviousSibling(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the next sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextSibling(): boolean;
    /**
     * Moves the focus of the navigator to the next sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextSibling(name: string): boolean;
    /**
     * Moves the focus of the navigator to the next sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextSibling(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the next sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextSibling(kind: SyntaxKind): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the next sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasNextSibling(): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the next sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasNextSibling(name: string): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the next sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasNextSibling(predicate: (node: Node) => boolean): boolean;
    /**
     * Tests whether the navigator can move the focus of the navigator to the next sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus can change; otherwise, `false`.
     */
    hasNextSibling(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the last sibling of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastSibling(): boolean;
    /**
     * Moves the focus of the navigator to the last sibling of the focused {@link Node} with the provided property name.
     * @param name The name of a property on the parent of the focused {@link Node}.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastSibling(name: string): boolean;
    /**
     * Moves the focus of the navigator to the last sibling of the focused {@link Node} that matches the provided predicate.
     * @param predicate A callback used to match a sibling node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastSibling(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the last sibling of the focused {@link Node} matching the provided {@link SyntaxKind}.
     * @param kind The {@link SyntaxKind} that the sibling must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastSibling(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the first {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstToken(): boolean;
    /**
     * Moves the focus of the navigator to the first {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @param predicate A callback used to match a token node.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstToken(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the first {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @param kind The {@link SyntaxKind} that the previous token must match.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToFirstToken(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the last {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastToken(): boolean;
    /**
     * Moves the focus of the navigator to the last {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @param predicate A callback used to match a token node.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastToken(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the last {@link Token}, {@link TextContent} or {@link InvalidSymbol} descendant (or self) of the focused {@link Node}.
     * @param kind The {@link SyntaxKind} that the previous token must match.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToLastToken(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the next {@link Token}, {@link TextContent} or {@link InvalidSymbol} following the focused {@link Node} in document order.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextToken(): boolean;
    /**
     * Moves the focus of the navigator to the next {@link Token}, {@link TextContent} or {@link InvalidSymbol} following the focused {@link Node} in document order.
     * @param predicate A callback used to match a token node.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextToken(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the next {@link Token}, {@link TextContent} or {@link InvalidSymbol} following the focused {@link Node} in document order.
     * @param kind The {@link SyntaxKind} that the previous token must match.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToNextToken(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the previous {@link Token}, {@link TextContent} or {@link InvalidSymbol} preceding the focused {@link Node} in document order.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousToken(): boolean;
    /**
     * Moves the focus of the navigator to the previous {@link Token}, {@link TextContent} or {@link InvalidSymbol} preceding the focused {@link Node} in document order.
     * @param predicate A callback used to match a token node.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousToken(predicate: (node: Node) => boolean): boolean;
    /**
     * Moves the focus of the navigator to the previous {@link Token}, {@link TextContent} or {@link InvalidSymbol} preceding the focused {@link Node} in document order.
     * @param kind The {@link SyntaxKind} that the previous token must match.
     * @returns `true` if the current focus is a {@link Token}, {@link TextContent} or {@link InvalidSymbol} or if the navigator's focus changed; otherwise, `false`.
     */
    moveToPreviousToken(kind: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the {@link Node} that contains the provided [Position](xref:grammarkdown!Position:interface).
     * @param position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator.
     * @param outermost When `true`, moves to the outermost node containing the provided position.
     * When `false` or not specified, moves to the innermost node containing the provided position.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToPosition(position: Position, outermost?: boolean): boolean;
    /**
     * Moves the focus of the navigator to the nearest {@link Token}, {@link TextContentNode}, or {@link InvalidSymbol} that is touching the provided [Position](xref:grammarkdown!Position:interface).
     * @param position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator.
     * @param predicate A callback used to match a token node.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToTouchingToken(position: Position, predicate?: SyntaxKind): boolean;
    /**
     * Moves the focus of the navigator to the nearest {@link Token}, {@link TextContentNode}, or {@link InvalidSymbol} that is touching the provided [Position](xref:grammarkdown!Position:interface).
     * @param position The [Position](xref:grammarkdown!Position:interface) at which to focus the navigator.
     * @param kind The {@link SyntaxKind} that the previous token must match.
     * @returns `true` if the navigator's focus changed; otherwise, `false`.
     */
    moveToTouchingToken(position: Position, kind: SyntaxKind): boolean;
    private _isMatch;
    private _moveToPositionWorker;
    private _moveToTouchingTokenWorker;
    private _moveToFirstLeadingToken;
    private _moveToPreviousLeadingToken;
    private _moveToNextLeadingToken;
    private _moveToLastLeadingToken;
    private _moveToFirstTrailingToken;
    private _moveToLastTrailingToken;
    private _moveToPreviousTrailingToken;
    private _moveToNextTrailingToken;
    private _moveToFirstTokenWorker;
    private _moveToLastTokenWorker;
    private _moveToNextTokenWorker;
    private _moveToPreviousTokenWorker;
    private _getDepth;
    private _speculate;
    private _beforeNavigate;
    private _afterNavigate;
    private _pushEdge;
    private _setEdge;
    private _popEdge;
    private _moveToChild;
    private _moveToElement;
    private _moveToSibling;
    private _reset;
}
