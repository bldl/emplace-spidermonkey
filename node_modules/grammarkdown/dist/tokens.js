"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenToString = exports.formatKind = exports.stringToToken = exports.isSourceElementKind = exports.isMetaElementKind = exports.isProductionBodyKind = exports.isProseFragmentKind = exports.isLexicalSymbolKind = exports.isPrimarySymbolKind = exports.isOptionalSymbolKind = exports.isAssertionKind = exports.isTextContentKind = exports.isProseFragmentLiteralKind = exports.isTokenKind = exports.isKeywordKind = exports.isPunctuationKind = exports.isTriviaKind = exports.isHtmlTagTriviaKind = exports.isHtmlTriviaKind = exports.isCommentTriviaKind = exports.SyntaxKind = void 0;
const core_1 = require("./core");
/** {@docCategory Parse} */
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind[SyntaxKind["Unknown"] = 0] = "Unknown";
    // Trivia, Comments
    SyntaxKind[SyntaxKind["SingleLineCommentTrivia"] = 1] = "SingleLineCommentTrivia";
    SyntaxKind[SyntaxKind["MultiLineCommentTrivia"] = 2] = "MultiLineCommentTrivia";
    // Trivia, Html
    SyntaxKind[SyntaxKind["HtmlCommentTrivia"] = 3] = "HtmlCommentTrivia";
    SyntaxKind[SyntaxKind["HtmlOpenTagTrivia"] = 4] = "HtmlOpenTagTrivia";
    SyntaxKind[SyntaxKind["HtmlCloseTagTrivia"] = 5] = "HtmlCloseTagTrivia";
    // Tokens, Other
    SyntaxKind[SyntaxKind["EndOfFileToken"] = 6] = "EndOfFileToken";
    // Tokens, Punctuation
    SyntaxKind[SyntaxKind["AtToken"] = 7] = "AtToken";
    SyntaxKind[SyntaxKind["OpenBraceToken"] = 8] = "OpenBraceToken";
    SyntaxKind[SyntaxKind["CloseBraceToken"] = 9] = "CloseBraceToken";
    SyntaxKind[SyntaxKind["OpenBracketToken"] = 10] = "OpenBracketToken";
    SyntaxKind[SyntaxKind["OpenBracketGreaterThanToken"] = 11] = "OpenBracketGreaterThanToken";
    SyntaxKind[SyntaxKind["CloseBracketToken"] = 12] = "CloseBracketToken";
    SyntaxKind[SyntaxKind["GreaterThanToken"] = 13] = "GreaterThanToken";
    SyntaxKind[SyntaxKind["OpenParenToken"] = 14] = "OpenParenToken";
    SyntaxKind[SyntaxKind["CloseParenToken"] = 15] = "CloseParenToken";
    SyntaxKind[SyntaxKind["ColonToken"] = 16] = "ColonToken";
    SyntaxKind[SyntaxKind["ColonColonToken"] = 17] = "ColonColonToken";
    SyntaxKind[SyntaxKind["ColonColonColonToken"] = 18] = "ColonColonColonToken";
    SyntaxKind[SyntaxKind["CommaToken"] = 19] = "CommaToken";
    SyntaxKind[SyntaxKind["PlusToken"] = 20] = "PlusToken";
    SyntaxKind[SyntaxKind["TildeToken"] = 21] = "TildeToken";
    SyntaxKind[SyntaxKind["QuestionToken"] = 22] = "QuestionToken";
    SyntaxKind[SyntaxKind["EqualsToken"] = 23] = "EqualsToken";
    SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 24] = "EqualsEqualsToken";
    SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 25] = "ExclamationEqualsToken";
    SyntaxKind[SyntaxKind["LessThanExclamationToken"] = 26] = "LessThanExclamationToken";
    SyntaxKind[SyntaxKind["LessThanMinusToken"] = 27] = "LessThanMinusToken";
    SyntaxKind[SyntaxKind["NotEqualToToken"] = 28] = "NotEqualToToken";
    SyntaxKind[SyntaxKind["ElementOfToken"] = 29] = "ElementOfToken";
    SyntaxKind[SyntaxKind["NotAnElementOfToken"] = 30] = "NotAnElementOfToken";
    // Tokens, Keywords
    SyntaxKind[SyntaxKind["ButKeyword"] = 31] = "ButKeyword";
    SyntaxKind[SyntaxKind["DefineKeyword"] = 32] = "DefineKeyword";
    SyntaxKind[SyntaxKind["DefaultKeyword"] = 33] = "DefaultKeyword";
    SyntaxKind[SyntaxKind["EmptyKeyword"] = 34] = "EmptyKeyword";
    SyntaxKind[SyntaxKind["FalseKeyword"] = 35] = "FalseKeyword";
    SyntaxKind[SyntaxKind["GoalKeyword"] = 36] = "GoalKeyword";
    SyntaxKind[SyntaxKind["HereKeyword"] = 37] = "HereKeyword";
    SyntaxKind[SyntaxKind["ImportKeyword"] = 38] = "ImportKeyword";
    SyntaxKind[SyntaxKind["LexicalKeyword"] = 39] = "LexicalKeyword";
    SyntaxKind[SyntaxKind["LineKeyword"] = 40] = "LineKeyword";
    SyntaxKind[SyntaxKind["LookaheadKeyword"] = 41] = "LookaheadKeyword";
    SyntaxKind[SyntaxKind["NoKeyword"] = 42] = "NoKeyword";
    SyntaxKind[SyntaxKind["NotKeyword"] = 43] = "NotKeyword";
    SyntaxKind[SyntaxKind["OfKeyword"] = 44] = "OfKeyword";
    SyntaxKind[SyntaxKind["OneKeyword"] = 45] = "OneKeyword";
    SyntaxKind[SyntaxKind["OrKeyword"] = 46] = "OrKeyword";
    SyntaxKind[SyntaxKind["ThroughKeyword"] = 47] = "ThroughKeyword";
    SyntaxKind[SyntaxKind["TrueKeyword"] = 48] = "TrueKeyword";
    // TextContent, Literals
    SyntaxKind[SyntaxKind["StringLiteral"] = 49] = "StringLiteral";
    SyntaxKind[SyntaxKind["NumberLiteral"] = 50] = "NumberLiteral";
    SyntaxKind[SyntaxKind["TerminalLiteral"] = 51] = "TerminalLiteral";
    SyntaxKind[SyntaxKind["UnicodeCharacterLiteral"] = 52] = "UnicodeCharacterLiteral";
    // TextContent, Literals, Prose Fragments
    SyntaxKind[SyntaxKind["ProseHead"] = 53] = "ProseHead";
    SyntaxKind[SyntaxKind["ProseMiddle"] = 54] = "ProseMiddle";
    SyntaxKind[SyntaxKind["ProseTail"] = 55] = "ProseTail";
    SyntaxKind[SyntaxKind["ProseFull"] = 56] = "ProseFull";
    // TextContent, Identifiers
    SyntaxKind[SyntaxKind["Identifier"] = 57] = "Identifier";
    // Nodes, File
    SyntaxKind[SyntaxKind["SourceFile"] = 58] = "SourceFile";
    // Nodes, Top Level
    SyntaxKind[SyntaxKind["Import"] = 59] = "Import";
    SyntaxKind[SyntaxKind["Define"] = 60] = "Define";
    SyntaxKind[SyntaxKind["Line"] = 61] = "Line";
    SyntaxKind[SyntaxKind["Production"] = 62] = "Production";
    // Nodes, Elements
    SyntaxKind[SyntaxKind["Parameter"] = 63] = "Parameter";
    SyntaxKind[SyntaxKind["ParameterList"] = 64] = "ParameterList";
    SyntaxKind[SyntaxKind["Argument"] = 65] = "Argument";
    SyntaxKind[SyntaxKind["ArgumentList"] = 66] = "ArgumentList";
    SyntaxKind[SyntaxKind["LinkReference"] = 67] = "LinkReference";
    SyntaxKind[SyntaxKind["OneOfList"] = 68] = "OneOfList";
    SyntaxKind[SyntaxKind["RightHandSideList"] = 69] = "RightHandSideList";
    SyntaxKind[SyntaxKind["RightHandSide"] = 70] = "RightHandSide";
    SyntaxKind[SyntaxKind["Constraints"] = 71] = "Constraints";
    SyntaxKind[SyntaxKind["SymbolSpan"] = 72] = "SymbolSpan";
    SyntaxKind[SyntaxKind["SymbolSet"] = 73] = "SymbolSet";
    // Nodes, Symbols
    SyntaxKind[SyntaxKind["ButNotSymbol"] = 74] = "ButNotSymbol";
    SyntaxKind[SyntaxKind["UnicodeCharacterRange"] = 75] = "UnicodeCharacterRange";
    SyntaxKind[SyntaxKind["OneOfSymbol"] = 76] = "OneOfSymbol";
    SyntaxKind[SyntaxKind["PlaceholderSymbol"] = 77] = "PlaceholderSymbol";
    SyntaxKind[SyntaxKind["Nonterminal"] = 78] = "Nonterminal";
    SyntaxKind[SyntaxKind["Terminal"] = 79] = "Terminal";
    SyntaxKind[SyntaxKind["Prose"] = 80] = "Prose";
    // Nodes, Symbols, Assertions
    SyntaxKind[SyntaxKind["EmptyAssertion"] = 81] = "EmptyAssertion";
    SyntaxKind[SyntaxKind["LookaheadAssertion"] = 82] = "LookaheadAssertion";
    SyntaxKind[SyntaxKind["LexicalGoalAssertion"] = 83] = "LexicalGoalAssertion";
    SyntaxKind[SyntaxKind["NoSymbolHereAssertion"] = 84] = "NoSymbolHereAssertion";
    SyntaxKind[SyntaxKind["ProseAssertion"] = 85] = "ProseAssertion";
    // Nodes, Error
    SyntaxKind[SyntaxKind["InvalidSymbol"] = 86] = "InvalidSymbol";
    SyntaxKind[SyntaxKind["InvalidAssertion"] = 87] = "InvalidAssertion";
    // Ranges
    SyntaxKind[SyntaxKind["FirstToken"] = 6] = "FirstToken";
    SyntaxKind[SyntaxKind["LastToken"] = 48] = "LastToken";
    SyntaxKind[SyntaxKind["FirstKeyword"] = 31] = "FirstKeyword";
    SyntaxKind[SyntaxKind["LastKeyword"] = 48] = "LastKeyword";
    SyntaxKind[SyntaxKind["FirstPunctuation"] = 7] = "FirstPunctuation";
    SyntaxKind[SyntaxKind["LastPunctuation"] = 30] = "LastPunctuation";
    SyntaxKind[SyntaxKind["FirstLiteral"] = 49] = "FirstLiteral";
    SyntaxKind[SyntaxKind["LastLiteral"] = 52] = "LastLiteral";
    SyntaxKind[SyntaxKind["FirstProseFragmentLiteral"] = 53] = "FirstProseFragmentLiteral";
    SyntaxKind[SyntaxKind["LastProseFragmentLiteral"] = 56] = "LastProseFragmentLiteral";
    SyntaxKind[SyntaxKind["FirstTextContent"] = 49] = "FirstTextContent";
    SyntaxKind[SyntaxKind["LastTextContent"] = 57] = "LastTextContent";
    SyntaxKind[SyntaxKind["FirstErrorNode"] = 86] = "FirstErrorNode";
    SyntaxKind[SyntaxKind["LastErrorNode"] = 87] = "LastErrorNode";
    SyntaxKind[SyntaxKind["FirstTrivia"] = 1] = "FirstTrivia";
    SyntaxKind[SyntaxKind["LastTrivia"] = 5] = "LastTrivia";
    SyntaxKind[SyntaxKind["FirstCommentTrivia"] = 1] = "FirstCommentTrivia";
    SyntaxKind[SyntaxKind["LastCommentTrivia"] = 2] = "LastCommentTrivia";
    SyntaxKind[SyntaxKind["FirstHtmlTrivia"] = 3] = "FirstHtmlTrivia";
    SyntaxKind[SyntaxKind["LastHtmlTrivia"] = 5] = "LastHtmlTrivia";
    SyntaxKind[SyntaxKind["FirstHtmlTagTrivia"] = 4] = "FirstHtmlTagTrivia";
    SyntaxKind[SyntaxKind["LastHtmlTagTrivia"] = 5] = "LastHtmlTagTrivia";
})(SyntaxKind = exports.SyntaxKind || (exports.SyntaxKind = {}));
function isCommentTriviaKind(kind) {
    return kind >= SyntaxKind.FirstCommentTrivia
        && kind <= SyntaxKind.LastCommentTrivia;
}
exports.isCommentTriviaKind = isCommentTriviaKind;
function isHtmlTriviaKind(kind) {
    return kind >= SyntaxKind.FirstHtmlTrivia
        && kind <= SyntaxKind.LastHtmlTrivia;
}
exports.isHtmlTriviaKind = isHtmlTriviaKind;
function isHtmlTagTriviaKind(kind) {
    return kind >= SyntaxKind.FirstHtmlTagTrivia
        && kind <= SyntaxKind.LastHtmlTagTrivia;
}
exports.isHtmlTagTriviaKind = isHtmlTagTriviaKind;
function isTriviaKind(kind) {
    return kind >= SyntaxKind.FirstTrivia
        && kind <= SyntaxKind.LastTrivia;
}
exports.isTriviaKind = isTriviaKind;
function isPunctuationKind(kind) {
    return kind >= SyntaxKind.FirstPunctuation
        && kind <= SyntaxKind.LastPunctuation;
}
exports.isPunctuationKind = isPunctuationKind;
function isKeywordKind(kind) {
    return kind >= SyntaxKind.FirstKeyword
        && kind <= SyntaxKind.LastKeyword;
}
exports.isKeywordKind = isKeywordKind;
function isTokenKind(kind) {
    return kind === SyntaxKind.EndOfFileToken
        || kind >= SyntaxKind.FirstToken
            && kind <= SyntaxKind.LastToken;
}
exports.isTokenKind = isTokenKind;
function isProseFragmentLiteralKind(kind) {
    return kind >= SyntaxKind.FirstProseFragmentLiteral
        && kind <= SyntaxKind.LastProseFragmentLiteral;
}
exports.isProseFragmentLiteralKind = isProseFragmentLiteralKind;
function isTextContentKind(kind) {
    return kind >= SyntaxKind.FirstTextContent
        && kind <= SyntaxKind.LastTextContent;
}
exports.isTextContentKind = isTextContentKind;
function isAssertionKind(kind) {
    return kind === SyntaxKind.EmptyAssertion
        || kind === SyntaxKind.LookaheadAssertion
        || kind === SyntaxKind.LexicalGoalAssertion
        || kind === SyntaxKind.NoSymbolHereAssertion
        || kind === SyntaxKind.ProseAssertion
        || kind === SyntaxKind.InvalidAssertion;
}
exports.isAssertionKind = isAssertionKind;
function isOptionalSymbolKind(kind) {
    return kind === SyntaxKind.Terminal
        || kind === SyntaxKind.Nonterminal;
}
exports.isOptionalSymbolKind = isOptionalSymbolKind;
function isPrimarySymbolKind(kind) {
    return isOptionalSymbolKind(kind);
}
exports.isPrimarySymbolKind = isPrimarySymbolKind;
function isLexicalSymbolKind(kind) {
    return isPrimarySymbolKind(kind)
        || isOptionalSymbolKind(kind)
        || kind === SyntaxKind.PlaceholderSymbol
        || kind === SyntaxKind.UnicodeCharacterRange
        || kind === SyntaxKind.ButNotSymbol
        || kind === SyntaxKind.Prose
        || kind === SyntaxKind.OneOfSymbol
        || kind === SyntaxKind.InvalidSymbol;
}
exports.isLexicalSymbolKind = isLexicalSymbolKind;
function isProseFragmentKind(kind) {
    return isProseFragmentLiteralKind(kind)
        || kind === SyntaxKind.Terminal
        || kind === SyntaxKind.Nonterminal;
}
exports.isProseFragmentKind = isProseFragmentKind;
function isProductionBodyKind(kind) {
    return kind === SyntaxKind.OneOfList
        || kind === SyntaxKind.RightHandSide
        || kind === SyntaxKind.RightHandSideList;
}
exports.isProductionBodyKind = isProductionBodyKind;
function isMetaElementKind(kind) {
    return kind === SyntaxKind.Import
        || kind === SyntaxKind.Define
        || kind === SyntaxKind.Line;
}
exports.isMetaElementKind = isMetaElementKind;
function isSourceElementKind(kind) {
    return isMetaElementKind(kind)
        || kind === SyntaxKind.Production;
}
exports.isSourceElementKind = isSourceElementKind;
const textToToken = new Map([
    ["@", SyntaxKind.AtToken],
    [":", SyntaxKind.ColonToken],
    ["::", SyntaxKind.ColonColonToken],
    [":::", SyntaxKind.ColonColonColonToken],
    ["{", SyntaxKind.OpenBraceToken],
    ["}", SyntaxKind.CloseBraceToken],
    ["(", SyntaxKind.OpenParenToken],
    [")", SyntaxKind.CloseParenToken],
    ["[", SyntaxKind.OpenBracketToken],
    ["[>", SyntaxKind.OpenBracketGreaterThanToken],
    ["]", SyntaxKind.CloseBracketToken],
    [">", SyntaxKind.GreaterThanToken],
    [",", SyntaxKind.CommaToken],
    ["+", SyntaxKind.PlusToken],
    ["~", SyntaxKind.TildeToken],
    ["?", SyntaxKind.QuestionToken],
    ["=", SyntaxKind.EqualsToken],
    ["==", SyntaxKind.EqualsEqualsToken],
    ["!=", SyntaxKind.ExclamationEqualsToken],
    ["≠", SyntaxKind.NotEqualToToken],
    ["<-", SyntaxKind.LessThanMinusToken],
    ["∈", SyntaxKind.ElementOfToken],
    ["<!", SyntaxKind.LessThanExclamationToken],
    ["∉", SyntaxKind.NotAnElementOfToken],
    ["but", SyntaxKind.ButKeyword],
    ["define", SyntaxKind.DefineKeyword],
    ["default", SyntaxKind.DefaultKeyword],
    ["empty", SyntaxKind.EmptyKeyword],
    ["false", SyntaxKind.FalseKeyword],
    ["goal", SyntaxKind.GoalKeyword],
    ["here", SyntaxKind.HereKeyword],
    ["import", SyntaxKind.ImportKeyword],
    ["lexical", SyntaxKind.LexicalKeyword],
    ["line", SyntaxKind.LineKeyword],
    ["lookahead", SyntaxKind.LookaheadKeyword],
    ["no", SyntaxKind.NoKeyword],
    ["not", SyntaxKind.NotKeyword],
    ["of", SyntaxKind.OfKeyword],
    ["one", SyntaxKind.OneKeyword],
    ["or", SyntaxKind.OrKeyword],
    ["through", SyntaxKind.ThroughKeyword],
    ["true", SyntaxKind.TrueKeyword],
]);
const tokenToText = new Map([...textToToken]
    .map(([key, value]) => [value, key]));
function stringToToken(text) {
    return textToToken.get(text);
}
exports.stringToToken = stringToToken;
/* @internal */
function formatKind(kind) {
    return (0, core_1.formatEnum)(kind, SyntaxKind, /*isFlags*/ false);
}
exports.formatKind = formatKind;
function tokenToString(kind, quoted) {
    if (typeof kind === "string") {
        return kind;
    }
    const text = tokenToText.get(kind);
    if (text) {
        return quoted ? `'${text}'` : text;
    }
    switch (kind) {
        case SyntaxKind.Identifier:
            return "«identifier»";
        case SyntaxKind.TerminalLiteral:
            return "«terminal»";
        case SyntaxKind.UnicodeCharacterLiteral:
            return "«unicode character literal»";
        case SyntaxKind.Prose:
            return "«prose»";
        case SyntaxKind.Production:
            return "«production»";
        case SyntaxKind.OneOfList:
            return "«one of»";
        case SyntaxKind.RightHandSide:
            return "«right hand side»";
    }
    return "«" + formatKind(kind) + "»";
}
exports.tokenToString = tokenToString;
//# sourceMappingURL=tokens.js.map