/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
/** {@docCategory Parse} */
export declare const enum CharacterCodes {
    NullCharacter = 0,
    MaxAsciiCharacter = 127,
    LineFeed = 10,
    CarriageReturn = 13,
    LineSeparator = 8232,
    ParagraphSeparator = 8233,
    NextLine = 133,
    Space = 32,
    NonBreakingSpace = 160,
    EnQuad = 8192,
    EmQuad = 8193,
    EnSpace = 8194,
    EmSpace = 8195,
    ThreePerEmSpace = 8196,
    FourPerEmSpace = 8197,
    SixPerEmSpace = 8198,
    FigureSpace = 8199,
    PunctuationSpace = 8200,
    ThinSpace = 8201,
    HairSpace = 8202,
    ZeroWidthSpace = 8203,
    NarrowNoBreakSpace = 8239,
    IdeographicSpace = 12288,
    MathematicalSpace = 8287,
    Ogham = 5760,
    Underscore = 95,
    Number0 = 48,
    Number1 = 49,
    Number2 = 50,
    Number3 = 51,
    Number4 = 52,
    Number5 = 53,
    Number6 = 54,
    Number7 = 55,
    Number8 = 56,
    Number9 = 57,
    LowerA = 97,
    LowerB = 98,
    LowerC = 99,
    LowerD = 100,
    LowerE = 101,
    LowerF = 102,
    LowerG = 103,
    LowerH = 104,
    LowerI = 105,
    LowerJ = 106,
    LowerK = 107,
    LowerL = 108,
    LowerM = 109,
    LowerN = 110,
    LowerO = 111,
    LowerP = 112,
    LowerQ = 113,
    LowerR = 114,
    LowerS = 115,
    LowerT = 116,
    LowerU = 117,
    LowerV = 118,
    LowerW = 119,
    LowerX = 120,
    LowerY = 121,
    LowerZ = 122,
    UpperA = 65,
    UpperB = 66,
    UpperC = 67,
    UpperD = 68,
    UpperE = 69,
    UpperF = 70,
    UpperG = 71,
    UpperH = 72,
    UpperI = 73,
    UpperJ = 74,
    UpperK = 75,
    UpperL = 76,
    UpperM = 77,
    UpperN = 78,
    UpperO = 79,
    UpperP = 80,
    UpperQ = 81,
    UpperR = 82,
    UpperS = 83,
    UpperT = 84,
    UpperU = 85,
    UpperV = 86,
    UpperW = 87,
    UpperX = 88,
    UpperY = 89,
    UpperZ = 90,
    Hash = 35,
    Ampersand = 38,
    Asterisk = 42,
    At = 64,
    Backslash = 92,
    Backtick = 96,
    Bar = 124,
    CloseBrace = 125,
    CloseBracket = 93,
    CloseParen = 41,
    Colon = 58,
    Semicolon = 59,
    Comma = 44,
    Dot = 46,
    DoubleQuote = 34,
    Equals = 61,
    Exclamation = 33,
    GreaterThan = 62,
    LessThan = 60,
    Minus = 45,
    OpenBrace = 123,
    OpenBracket = 91,
    OpenParen = 40,
    Plus = 43,
    Question = 63,
    SingleQuote = 39,
    Slash = 47,
    Tilde = 126,
    NumberSign = 35,
    Backspace = 8,
    FormFeed = 12,
    Tab = 9,
    VerticalTab = 11,
    NotEqualTo = 8800,
    ElementOf = 8712,
    NotAnElementOf = 8713,
    ByteOrderMark = 65279
}
/** {@docCategory Parse} */
export declare enum SyntaxKind {
    Unknown = 0,
    SingleLineCommentTrivia = 1,
    MultiLineCommentTrivia = 2,
    HtmlCommentTrivia = 3,
    HtmlOpenTagTrivia = 4,
    HtmlCloseTagTrivia = 5,
    EndOfFileToken = 6,
    AtToken = 7,
    OpenBraceToken = 8,
    CloseBraceToken = 9,
    OpenBracketToken = 10,
    OpenBracketGreaterThanToken = 11,
    CloseBracketToken = 12,
    GreaterThanToken = 13,
    OpenParenToken = 14,
    CloseParenToken = 15,
    ColonToken = 16,
    ColonColonToken = 17,
    ColonColonColonToken = 18,
    CommaToken = 19,
    PlusToken = 20,
    TildeToken = 21,
    QuestionToken = 22,
    EqualsToken = 23,
    EqualsEqualsToken = 24,
    ExclamationEqualsToken = 25,
    LessThanExclamationToken = 26,
    LessThanMinusToken = 27,
    NotEqualToToken = 28,
    ElementOfToken = 29,
    NotAnElementOfToken = 30,
    ButKeyword = 31,
    DefineKeyword = 32,
    DefaultKeyword = 33,
    EmptyKeyword = 34,
    FalseKeyword = 35,
    GoalKeyword = 36,
    HereKeyword = 37,
    ImportKeyword = 38,
    LexicalKeyword = 39,
    LineKeyword = 40,
    LookaheadKeyword = 41,
    NoKeyword = 42,
    NotKeyword = 43,
    OfKeyword = 44,
    OneKeyword = 45,
    OrKeyword = 46,
    ThroughKeyword = 47,
    TrueKeyword = 48,
    StringLiteral = 49,
    NumberLiteral = 50,
    TerminalLiteral = 51,
    UnicodeCharacterLiteral = 52,
    ProseHead = 53,
    ProseMiddle = 54,
    ProseTail = 55,
    ProseFull = 56,
    Identifier = 57,
    SourceFile = 58,
    Import = 59,
    Define = 60,
    Line = 61,
    Production = 62,
    Parameter = 63,
    ParameterList = 64,
    Argument = 65,
    ArgumentList = 66,
    LinkReference = 67,
    OneOfList = 68,
    RightHandSideList = 69,
    RightHandSide = 70,
    Constraints = 71,
    SymbolSpan = 72,
    SymbolSet = 73,
    ButNotSymbol = 74,
    UnicodeCharacterRange = 75,
    OneOfSymbol = 76,
    PlaceholderSymbol = 77,
    Nonterminal = 78,
    Terminal = 79,
    Prose = 80,
    EmptyAssertion = 81,
    LookaheadAssertion = 82,
    LexicalGoalAssertion = 83,
    NoSymbolHereAssertion = 84,
    ProseAssertion = 85,
    InvalidSymbol = 86,
    InvalidAssertion = 87,
    FirstToken = 6,
    LastToken = 48,
    FirstKeyword = 31,
    LastKeyword = 48,
    FirstPunctuation = 7,
    LastPunctuation = 30,
    FirstLiteral = 49,
    LastLiteral = 52,
    FirstProseFragmentLiteral = 53,
    LastProseFragmentLiteral = 56,
    FirstTextContent = 49,
    LastTextContent = 57,
    FirstErrorNode = 86,
    LastErrorNode = 87,
    FirstTrivia = 1,
    LastTrivia = 5,
    FirstCommentTrivia = 1,
    LastCommentTrivia = 2,
    FirstHtmlTrivia = 3,
    LastHtmlTrivia = 5,
    FirstHtmlTagTrivia = 4,
    LastHtmlTagTrivia = 5
}
export declare type CommentTriviaKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia;
export declare function isCommentTriviaKind(kind: SyntaxKind): kind is CommentTriviaKind;
export declare type HtmlTriviaKind = SyntaxKind.HtmlCommentTrivia | SyntaxKind.HtmlOpenTagTrivia | SyntaxKind.HtmlCloseTagTrivia;
export declare function isHtmlTriviaKind(kind: SyntaxKind): kind is HtmlTriviaKind;
export declare type HtmlTagTriviaKind = SyntaxKind.HtmlOpenTagTrivia | SyntaxKind.HtmlCloseTagTrivia;
export declare function isHtmlTagTriviaKind(kind: SyntaxKind): kind is HtmlTagTriviaKind;
export declare type TriviaKind = CommentTriviaKind | HtmlTriviaKind;
export declare function isTriviaKind(kind: SyntaxKind): kind is TriviaKind;
export declare type PunctuationKind = SyntaxKind.AtToken | SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.OpenBracketToken | SyntaxKind.OpenBracketGreaterThanToken | SyntaxKind.CloseBracketToken | SyntaxKind.GreaterThanToken | SyntaxKind.OpenParenToken | SyntaxKind.CloseParenToken | SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken | SyntaxKind.CommaToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken | SyntaxKind.QuestionToken | SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.LessThanMinusToken | SyntaxKind.NotEqualToToken | SyntaxKind.ElementOfToken | SyntaxKind.NotAnElementOfToken;
export declare function isPunctuationKind(kind: SyntaxKind): kind is PunctuationKind;
export declare type LookaheadOperatorKind = SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.NotEqualToToken | SyntaxKind.LessThanMinusToken | SyntaxKind.ElementOfToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.NotAnElementOfToken;
export declare type ProductionSeperatorKind = SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken;
export declare type ParameterOperatorKind = SyntaxKind.PlusToken | SyntaxKind.TildeToken;
export declare type ArgumentOperatorKind = SyntaxKind.QuestionToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken;
export declare type KeywordKind = SyntaxKind.ButKeyword | SyntaxKind.DefaultKeyword | SyntaxKind.DefineKeyword | SyntaxKind.EmptyKeyword | SyntaxKind.FalseKeyword | SyntaxKind.GoalKeyword | SyntaxKind.HereKeyword | SyntaxKind.ImportKeyword | SyntaxKind.LexicalKeyword | SyntaxKind.LineKeyword | SyntaxKind.LookaheadKeyword | SyntaxKind.NoKeyword | SyntaxKind.NotKeyword | SyntaxKind.OfKeyword | SyntaxKind.OneKeyword | SyntaxKind.OrKeyword | SyntaxKind.ThroughKeyword | SyntaxKind.TrueKeyword;
export declare function isKeywordKind(kind: SyntaxKind): kind is KeywordKind;
export declare type BooleanKind = SyntaxKind.TrueKeyword | SyntaxKind.FalseKeyword;
export declare type TokenKind = SyntaxKind.EndOfFileToken | PunctuationKind | KeywordKind;
export declare function isTokenKind(kind: SyntaxKind): kind is TokenKind;
export declare type ProseFragmentLiteralKind = SyntaxKind.ProseFull | SyntaxKind.ProseHead | SyntaxKind.ProseMiddle | SyntaxKind.ProseTail;
export declare function isProseFragmentLiteralKind(kind: SyntaxKind): kind is ProseFragmentLiteralKind;
export declare type TextContentKind = SyntaxKind.StringLiteral | SyntaxKind.NumberLiteral | SyntaxKind.TerminalLiteral | SyntaxKind.UnicodeCharacterLiteral | ProseFragmentLiteralKind | SyntaxKind.Identifier;
export declare function isTextContentKind(kind: SyntaxKind): kind is TextContentKind;
export declare type AssertionKind = SyntaxKind.EmptyAssertion | SyntaxKind.LookaheadAssertion | SyntaxKind.LexicalGoalAssertion | SyntaxKind.NoSymbolHereAssertion | SyntaxKind.ProseAssertion | SyntaxKind.InvalidAssertion;
export declare function isAssertionKind(kind: SyntaxKind): kind is AssertionKind;
export declare type OptionalSymbolKind = SyntaxKind.Terminal | SyntaxKind.Nonterminal;
export declare function isOptionalSymbolKind(kind: SyntaxKind): kind is OptionalSymbolKind;
export declare type PrimarySymbolKind = OptionalSymbolKind;
export declare function isPrimarySymbolKind(kind: SyntaxKind): kind is PrimarySymbolKind;
export declare type LexicalSymbolKind = PrimarySymbolKind | AssertionKind | SyntaxKind.PlaceholderSymbol | SyntaxKind.UnicodeCharacterRange | SyntaxKind.ButNotSymbol | SyntaxKind.Prose | SyntaxKind.OneOfSymbol | SyntaxKind.InvalidSymbol;
export declare function isLexicalSymbolKind(kind: SyntaxKind): kind is LexicalSymbolKind;
export declare type ProseFragmentKind = ProseFragmentLiteralKind | SyntaxKind.Terminal | SyntaxKind.Nonterminal;
export declare function isProseFragmentKind(kind: SyntaxKind): kind is ProseFragmentKind;
export declare type ProductionBodyKind = SyntaxKind.OneOfList | SyntaxKind.RightHandSide | SyntaxKind.RightHandSideList;
export declare function isProductionBodyKind(kind: SyntaxKind): kind is ProductionBodyKind;
export declare type MetaElementKind = SyntaxKind.Import | SyntaxKind.Define | SyntaxKind.Line;
export declare function isMetaElementKind(kind: SyntaxKind): kind is MetaElementKind;
export declare type SourceElementKind = MetaElementKind | SyntaxKind.Production;
export declare function isSourceElementKind(kind: SyntaxKind): kind is SourceElementKind;
export declare function stringToToken(text: string): SyntaxKind | undefined;
export declare function tokenToString(kind: SyntaxKind | string, quoted?: boolean): string;
