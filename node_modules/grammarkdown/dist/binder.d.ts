/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { Cancelable } from "@esfx/cancelable";
import { SyntaxKind } from "./tokens";
import { Symbol, SymbolKind, SymbolTable } from "./symbols";
import { SourceFile, Production, Parameter, Node } from "./nodes";
/** {@docCategory Bind} */
export declare class BindingTable {
    readonly globals: SymbolTable;
    private _nodeParents;
    private _nodeSymbols;
    private _symbolDeclarations;
    private _symbolReferences;
    private _symbolLocals;
    /**
     * Gets a value indicating whether this `BindingTable` is empty.
     */
    get isEmpty(): boolean;
    /**
     * Returns whether the provided `Node` has a parent.
     */
    hasParent(node: Node | undefined): boolean;
    /**
     * Gets the parent of the provided `Node`.
     */
    getParent(node: Node | undefined): Node | undefined;
    /**
     * Gets the nearest ancestor of `node` with the provided `kind`.
     */
    getAncestor(node: Node | undefined, kind: SyntaxKind): Node | undefined;
    /**
     * Gets the `SourceFile` containing `node`.
     */
    getSourceFile(node: Node | undefined): SourceFile | undefined;
    /**
     * Returns whether `node` has been bound to a `Symbol`.
     */
    hasSymbol(node: Node | undefined): boolean;
    /**
     * Gets the `Symbol` bound to `node`.
     */
    getSymbol(node: Node | undefined): Symbol | undefined;
    /**
     * Resolves a `Symbol` for the provided `name` at the given `location` that has the provided `meaning`.
     */
    resolveSymbol(location: Node | undefined, name: string | undefined, meaning: SymbolKind): Symbol | undefined;
    /**
     * Gets the declarations for the provided `symbol`.
     */
    getDeclarations(symbol: Symbol | undefined): (SourceFile | Production | Parameter)[];
    /**
     * Gets the references to the provided `symbol`.
     */
    getReferences(symbol: Symbol | undefined): Node[];
    private _setSymbolForNode;
    private _addReferenceToSymbol;
}
/** {@docCategory Bind} */
export declare class Binder {
    private _parentNode;
    private _parentSymbol;
    /**
     * Binds a `SourceFile` in the provided `BindingTable`.
     */
    bindSourceFile(file: SourceFile, bindings: BindingTable, cancelable?: Cancelable): void;
    private _bindProduction;
    private _bindParameter;
    private _bindChildren;
    private _bind;
    private _declareSymbol;
}
