"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Range = exports.Position = void 0;
/** {@docCategory Other} */
var Position;
(function (Position) {
    function create(line, character) {
        return { line, character };
    }
    Position.create = create;
    function clone(position) {
        return create(position.line, position.character);
    }
    Position.clone = clone;
    function compare(left, right) {
        if (left.line < right.line)
            return -1;
        if (left.line > right.line)
            return +1;
        if (left.character < right.character)
            return -1;
        if (left.character > right.character)
            return +1;
        return 0;
    }
    Position.compare = compare;
    function equals(left, right) {
        return left.line === right.line
            && left.character === right.character;
    }
    Position.equals = equals;
})(Position = exports.Position || (exports.Position = {}));
/** {@docCategory Other} */
var Range;
(function (Range) {
    function create(start, end) {
        return { start, end };
    }
    Range.create = create;
    function clone(range) {
        return create(Position.clone(range.start), Position.clone(range.end));
    }
    Range.clone = clone;
    function collapseToStart(range) {
        return create(range.start, range.start);
    }
    Range.collapseToStart = collapseToStart;
    function collapseToEnd(range) {
        return create(range.end, range.end);
    }
    Range.collapseToEnd = collapseToEnd;
    function isCollapsed(range) {
        return Position.compare(range.start, range.end) >= 0;
    }
    Range.isCollapsed = isCollapsed;
    function contains(left, right) {
        return Position.compare(left.start, right.start) <= 0
            && Position.compare(left.end, right.end) >= 0;
    }
    Range.contains = contains;
    function containsPosition(range, position) {
        return Position.compare(range.start, position) <= 0
            && Position.compare(range.end, position) >= 0;
    }
    Range.containsPosition = containsPosition;
    function intersects(left, right) {
        return containsPosition(left, right.start)
            || containsPosition(left, right.end);
    }
    Range.intersects = intersects;
    function equals(left, right) {
        return Position.equals(left.start, right.start)
            && Position.equals(left.end, right.end);
    }
    Range.equals = equals;
})(Range = exports.Range || (exports.Range = {}));
//# sourceMappingURL=types.js.map