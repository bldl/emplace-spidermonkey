/*!
* Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
*
* This file is licensed to you under the terms of the MIT License, found in the LICENSE file
* in the root of this repository or package.
*/
import { Cancelable } from "@esfx/cancelable";
import { CancelToken } from "@esfx/async-canceltoken";
import { DiagnosticMessages } from "../diagnostics";
import { CompilerOptions } from "../options";
import { Resolver } from "../checker";
import { StringWriter } from "../stringwriter";
import { SyntaxKind } from "../tokens";
import { TextRange } from "../types";
import { Argument, ArgumentList, ButNotSymbol, Constraints, Define, EmptyAssertion, HtmlCloseTagTrivia, HtmlOpenTagTrivia, HtmlCommentTrivia, Identifier, Import, LexicalGoalAssertion, Line, LinkReference, LookaheadAssertion, MultiLineCommentTrivia, Node, Nonterminal, NoSymbolHereAssertion, NumberLiteral, OneOfList, OneOfSymbol, Parameter, ParameterList, PlaceholderSymbol, Production, Prose, ProseAssertion, ProseFragmentLiteral, RightHandSide, RightHandSideList, SingleLineCommentTrivia, SourceFile, StringLiteral, SymbolSet, SymbolSpan, Terminal, TerminalLiteral, TextContent, Trivia, UnicodeCharacterLiteral, UnicodeCharacterRange } from "../nodes";
/** {@docCategory Emit} */
export declare class Emitter {
    protected options: CompilerOptions;
    protected resolver: Resolver;
    protected writer: StringWriter;
    protected extension: string;
    private _diagnostics;
    private _sourceFile;
    private _triviaPos;
    private _cancelToken?;
    constructor(options: CompilerOptions);
    protected get sourceFile(): SourceFile | undefined;
    emit(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>;
    emitString(sourceFile: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, cancelable?: Cancelable, node?: Node): string;
    protected getOutputFilename(node: SourceFile): string;
    protected createWriter(options: CompilerOptions): StringWriter;
    protected beforeEmitNode(node: Node): void;
    protected afterEmitNode(node: Node): void;
    protected emitNode(node: Node | undefined): void;
    protected emitNodeCore(node: Node): void;
    protected emitChildren(node: Node): void;
    protected emitNodes(nodes: Iterable<Node>): void;
    protected emitSourceFile(node: SourceFile): void;
    protected emitKeyword(node: Node): void;
    protected emitToken(node: Node | undefined): void;
    protected emitTokenKind(kind: SyntaxKind): void;
    protected emitStringLiteral(node: StringLiteral): void;
    protected emitNumberLiteral(node: NumberLiteral): void;
    protected emitPlaceholder(node: PlaceholderSymbol): void;
    protected emitTerminalLiteral(node: TerminalLiteral): void;
    protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void;
    protected emitTextContent(node: TextContent): void;
    protected emitProse(node: Prose): void;
    protected emitIdentifier(node: Identifier): void;
    protected emitParameter(node: Parameter): void;
    protected emitParameterList(node: ParameterList): void;
    protected emitArgument(node: Argument): void;
    protected emitArgumentList(node: ArgumentList): void;
    protected emitProduction(node: Production): void;
    protected emitImport(node: Import): void;
    protected emitDefine(node: Define): void;
    protected emitLine(node: Line): void;
    protected emitOneOfList(node: OneOfList): void;
    protected emitRightHandSideList(node: RightHandSideList): void;
    protected emitRightHandSide(node: RightHandSide): void;
    protected emitLinkReference(node: LinkReference): void;
    protected emitSymbolSpan(node: SymbolSpan): void;
    protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void;
    protected emitButNotSymbol(node: ButNotSymbol): void;
    protected emitOneOfSymbol(node: OneOfSymbol): void;
    protected emitNonterminal(node: Nonterminal): void;
    protected emitTerminal(node: Terminal): void;
    protected emitSymbolSet(node: SymbolSet): void;
    protected emitEmptyAssertion(node: EmptyAssertion): void;
    protected emitLookaheadAssertion(node: LookaheadAssertion): void;
    protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void;
    protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void;
    protected emitConstraints(node: Constraints): void;
    protected emitProseAssertion(node: ProseAssertion): void;
    protected emitProseFragmentLiteral(node: ProseFragmentLiteral): void;
    protected encode(text: string): string;
    protected emitDetachedTriviaOfNode(node: Node): void;
    protected emitLeadingTriviaOfNode(node: Node): void;
    protected emitTrailingTriviaOfNode(node: Node): void;
    protected emitTriviaNodes(nodes: readonly Trivia[] | undefined): void;
    protected emitTrivia(node: Trivia): void;
    protected beforeEmitTrivia(node: Trivia): void;
    protected afterEmitTrivia(node: Trivia): void;
    protected emitTriviaCore(node: Trivia): void;
    protected emitHtmlOpenTagTrivia(node: HtmlOpenTagTrivia): void;
    protected emitHtmlCloseTagTrivia(node: HtmlCloseTagTrivia): void;
    protected emitHtmlCommentTrivia(node: HtmlCommentTrivia): void;
    protected emitSingleLineCommentTrivia(node: SingleLineCommentTrivia): void;
    protected emitMultiLineCommentTrivia(node: MultiLineCommentTrivia): void;
    protected emitTextRange(range: TextRange): void;
}
