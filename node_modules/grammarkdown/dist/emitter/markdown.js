"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownEmitter = void 0;
const emitter_1 = require("./emitter");
const tokens_1 = require("../tokens");
/** {@docCategory Emit} */
class MarkdownEmitter extends emitter_1.Emitter {
    constructor() {
        super(...arguments);
        this.extension = ".md";
    }
    emitKeyword(node) {
        if (node) {
            this.writer.write(`**`);
            super.emitKeyword(node);
            this.writer.write(`**`);
        }
    }
    emitProse(node) {
        if (node.fragments) {
            this.emitNodes(node.fragments);
        }
    }
    emitProduction(node) {
        const linkId = this.resolver.getProductionLinkId(node.name);
        this.writer.write(`&emsp;&emsp;`);
        this.emitLinkAnchor(linkId);
        this.writer.write(`*`);
        this.emitIdentifier(node.name);
        this.writer.write(`*`);
        this.emitNode(node.parameterList);
        this.writer.write(` **`);
        this.emitToken(node.colonToken);
        this.writer.write(`**`);
        if (node.body && node.body.kind !== tokens_1.SyntaxKind.RightHandSideList) {
            this.writer.write(` `);
        }
        this.emitNode(node.body);
        this.writer.writeln();
        this.writer.write(`  `);
        this.writer.writeln();
    }
    emitParameterList(node) {
        this.writer.write(`<sub>\[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]</sub>`);
    }
    emitParameter(node) {
        this.emitIdentifier(node.name);
    }
    emitOneOfList(node) {
        this.writer.write(`**one of**`);
        const terminals = node.terminals;
        if (terminals && terminals.length > 0) {
            if (node.indented) {
                // get the maximum size for a terminal
                let width = 5;
                for (const terminal of terminals) {
                    if (terminal.text && terminal.text.length > width) {
                        width = terminal.text.length;
                    }
                }
                this.writer.write(`  `);
                this.writer.writeln();
                this.writer.write(`<pre>`);
                const columns = Math.floor(50 / width);
                let pad = 0;
                for (let i = 0; i < terminals.length; ++i) {
                    const terminal = terminals[i];
                    if (i % columns === 0) {
                        if (i > 0) {
                            this.writer.write(`  `);
                            this.writer.writeln();
                        }
                        this.writer.write(`&emsp;&emsp;&emsp;`);
                    }
                    else {
                        for (let j = 0; j <= pad; ++j) {
                            this.writer.write(` `);
                        }
                    }
                    if (terminal.text) {
                        this.writer.write(`<code>`);
                        this.writer.write(this.encode(terminal.text));
                        this.writer.write(`</code>`);
                        pad = width - terminal.text.length;
                    }
                }
                this.writer.write(`</pre>`);
            }
            else {
                this.writer.write(` `);
                if (node.terminals) {
                    for (let i = 0; i < node.terminals.length; ++i) {
                        if (i > 0) {
                            this.writer.write(`&emsp;`);
                        }
                        this.emitNode(node.terminals[i]);
                    }
                }
                this.writer.write(`  `);
            }
        }
    }
    emitRightHandSideList(node) {
        this.writer.write(`  `);
        if (node.elements) {
            for (const rhs of node.elements) {
                this.writer.writeln();
                this.writer.write(`&emsp;&emsp;&emsp;`);
                this.emitNode(rhs);
            }
        }
    }
    emitRightHandSide(node) {
        const linkId = this.resolver.getRightHandSideLinkId(node, /*includePrefix*/ true);
        this.emitLinkAnchor(linkId);
        super.emitRightHandSide(node);
    }
    emitSymbolSpan(node) {
        this.emitNode(node.symbol);
        if (node.next) {
            this.writer.write(`&emsp;`);
            this.emitNode(node.next);
        }
    }
    emitTerminal(node) {
        this.emitNode(node.literal);
        if (node.questionToken) {
            this.writer.write(`<sub>opt</sub>`);
        }
    }
    emitNonterminal(node) {
        const linkId = this.resolver.getProductionLinkId(node.name);
        this.writer.write(`*`);
        this.emitNodeWithLink(node.name, linkId);
        this.writer.write(`*`);
        this.emitNode(node.argumentList);
        if (node.questionToken) {
            this.writer.write(`<sub>opt</sub>`);
        }
    }
    emitArgumentList(node) {
        this.writer.write(`<sub>\[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]</sub>`);
    }
    emitArgument(node) {
        this.emitToken(node.operatorToken);
        this.emitNode(node.name);
    }
    emitUnicodeCharacterLiteral(node) {
        if (node.text) {
            this.writer.write(this.encode(node.text));
        }
    }
    emitTerminalLiteral(node) {
        this.writer.write("`` ");
        this.writer.write(node.text);
        this.writer.write(" ``");
    }
    emitEmptyAssertion(node) {
        this.writer.write(`\[empty]`);
    }
    emitSymbolSet(node) {
        this.writer.write(`{`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`,`);
                }
                this.writer.write(` `);
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(` }`);
    }
    emitLookaheadAssertion(node) {
        if (node.operatorToken) {
            switch (node.operatorToken.kind) {
                case tokens_1.SyntaxKind.ExclamationEqualsToken:
                case tokens_1.SyntaxKind.NotEqualToToken:
                    this.writer.write(`\[lookahead ≠ `);
                    break;
                case tokens_1.SyntaxKind.EqualsToken:
                case tokens_1.SyntaxKind.EqualsEqualsToken:
                    this.writer.write(`\[lookahead = `);
                    break;
                case tokens_1.SyntaxKind.LessThanMinusToken:
                case tokens_1.SyntaxKind.ElementOfToken:
                    this.writer.write(`\[lookahead ∈ `);
                    break;
                case tokens_1.SyntaxKind.LessThanExclamationToken:
                case tokens_1.SyntaxKind.NotAnElementOfToken:
                    this.writer.write(`\[lookahead ∉ `);
                    break;
            }
        }
        this.emitNode(node.lookahead);
        this.writer.write(`]`);
    }
    emitLexicalGoalAssertion(node) {
        const linkId = node.symbol && this.resolver.getProductionLinkId(node.symbol);
        this.writer.write(`\[lexical goal `);
        this.emitNodeWithLink(node.symbol, linkId);
        this.writer.write(`]`);
    }
    emitNoSymbolHereAssertion(node) {
        this.writer.write(`\[no `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` or `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
        this.writer.write(` here]`);
    }
    emitConstraints(node) {
        this.writer.write(`\[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]`);
        this.writer.write(`&emsp;`);
    }
    emitProseAssertion(node) {
        if (node.fragments) {
            for (const fragment of node.fragments) {
                this.emitNode(fragment);
            }
        }
    }
    emitUnicodeCharacterRange(node) {
        this.emitNode(node.left);
        this.writer.write(` **through** `);
        this.emitNode(node.right);
    }
    emitButNotSymbol(node) {
        this.emitNode(node.left);
        this.writer.write(` **but not** `);
        this.emitNode(node.right);
    }
    emitOneOfSymbol(node) {
        this.writer.write(`**one of** `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` **or** `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
    }
    emitTextContent(node) {
        this.writer.write(node.text);
    }
    afterEmitNode(node) {
        super.afterEmitNode(node);
        switch (node.kind) {
            case tokens_1.SyntaxKind.RightHandSide:
                this.writer.writeln(`  `);
                break;
            case tokens_1.SyntaxKind.RightHandSideList:
            case tokens_1.SyntaxKind.OneOfList:
            case tokens_1.SyntaxKind.Production:
                this.writer.writeln();
                break;
        }
    }
    emitLinkAnchor(linkId) {
        if (linkId) {
            this.writer.write(`<a name="${linkId}"></a>`);
        }
    }
    emitNodeWithLink(node, linkId) {
        if (linkId) {
            this.writer.write(`[`);
            this.emitNode(node);
            this.writer.write(`](#${linkId})`);
        }
        else {
            this.emitNode(node);
        }
    }
}
exports.MarkdownEmitter = MarkdownEmitter;
//# sourceMappingURL=markdown.js.map