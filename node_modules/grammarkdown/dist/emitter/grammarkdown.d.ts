/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { Emitter } from "./emitter";
import { Argument, ArgumentList, ButNotSymbol, Constraints, Define, EmptyAssertion, Import, LexicalGoalAssertion, LexicalSymbol, Line, LinkReference, LookaheadAssertion, MultiLineCommentTrivia, Nonterminal, NoSymbolHereAssertion, NumberLiteral, OneOfList, OneOfSymbol, Parameter, ParameterList, Production, Prose, ProseAssertion, RightHandSide, RightHandSideList, SingleLineCommentTrivia, SourceFile, StringLiteral, SymbolSet, SymbolSpan, Terminal, TerminalLiteral, TextContent, Trivia, UnicodeCharacterLiteral, UnicodeCharacterRange } from "../nodes";
/** {@docCategory Emit} */
export declare class GrammarkdownEmitter extends Emitter {
    protected extension: string;
    protected emitSourceFile(node: SourceFile): void;
    protected emitStringLiteral(node: StringLiteral): void;
    protected emitNumberLiteral(node: NumberLiteral): void;
    protected emitDefine(node: Define): void;
    protected emitLine(node: Line): void;
    protected emitImport(node: Import): void;
    protected emitProduction(node: Production): void;
    protected emitParameterList(node: ParameterList): void;
    protected emitParameter(node: Parameter): void;
    protected emitOneOfList(node: OneOfList): void;
    protected emitRightHandSideList(node: RightHandSideList): void;
    protected emitRightHandSide(node: RightHandSide): void;
    protected emitLinkReference(node: LinkReference): void;
    protected emitSymbolSpan(node: SymbolSpan): void;
    protected emitPlaceholder(node: LexicalSymbol): void;
    protected emitTerminal(node: Terminal): void;
    protected emitNonterminal(node: Nonterminal): void;
    protected emitArgumentList(node: ArgumentList): void;
    protected emitArgument(node: Argument): void;
    protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void;
    protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void;
    protected emitTerminalLiteral(node: TerminalLiteral): void;
    protected emitProse(node: Prose): void;
    protected emitEmptyAssertion(node: EmptyAssertion): void;
    protected emitSymbolSet(node: SymbolSet): void;
    protected emitLookaheadAssertion(node: LookaheadAssertion): void;
    protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void;
    protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void;
    protected emitConstraints(node: Constraints): void;
    protected emitProseAssertion(node: ProseAssertion): void;
    protected emitButNotSymbol(node: ButNotSymbol): void;
    protected emitOneOfSymbol(node: OneOfSymbol): void;
    protected emitTextContent(node: TextContent): void;
    protected beforeEmitTrivia(node: Trivia): void;
    protected afterEmitTrivia(node: Trivia): void;
    protected emitSingleLineCommentTrivia(node: SingleLineCommentTrivia): void;
    protected emitMultiLineCommentTrivia(node: MultiLineCommentTrivia): void;
}
