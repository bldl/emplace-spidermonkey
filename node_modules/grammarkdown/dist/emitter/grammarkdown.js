"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrammarkdownEmitter = void 0;
const emitter_1 = require("./emitter");
const tokens_1 = require("../tokens");
const nodes_1 = require("../nodes");
/** {@docCategory Emit} */
class GrammarkdownEmitter extends emitter_1.Emitter {
    constructor() {
        super(...arguments);
        this.extension = ".grammar";
    }
    emitSourceFile(node) {
        let lastElement;
        for (const element of node.elements) {
            if (lastElement) {
                if (!((0, tokens_1.isMetaElementKind)(lastElement.kind) && (0, tokens_1.isMetaElementKind)(element.kind)) &&
                    !areContiguousCollapsedProductions(lastElement, element)) {
                    this.writer.writeBlank();
                }
            }
            this.emitNode(element);
            this.writer.writeln();
            lastElement = element;
        }
        this.writer.writeln();
    }
    emitStringLiteral(node) {
        var _a;
        this.writer.write(JSON.stringify((_a = node.text) !== null && _a !== void 0 ? _a : ""));
    }
    emitNumberLiteral(node) {
        this.emitTextContent(node);
    }
    emitDefine(node) {
        this.emitNode(node.atToken);
        this.emitNode(node.defineKeyword);
        this.writer.write(" ");
        this.emitNode(node.key);
        this.writer.write(" ");
        this.emitNode(node.valueToken);
    }
    emitLine(node) {
        this.emitNode(node.atToken);
        this.emitNode(node.lineKeyword);
        this.writer.write(" ");
        this.emitNode(node.number);
        if (node.path) {
            this.writer.write(" ");
            this.emitNode(node.path);
        }
    }
    emitImport(node) {
        this.emitNode(node.atToken);
        this.emitNode(node.importKeyword);
        this.writer.write(" ");
        this.emitNode(node.path);
    }
    emitProduction(node) {
        var _a, _b, _c;
        this.emitIdentifier(node.name);
        this.emitNode(node.parameterList);
        this.writer.write(" ");
        this.emitTokenKind((_b = (_a = node.colonToken) === null || _a === void 0 ? void 0 : _a.kind) !== null && _b !== void 0 ? _b : tokens_1.SyntaxKind.ColonToken);
        switch ((_c = node.body) === null || _c === void 0 ? void 0 : _c.kind) {
            case tokens_1.SyntaxKind.OneOfList:
            case tokens_1.SyntaxKind.RightHandSide:
                this.writer.write(" ");
                break;
        }
        this.emitNode(node.body);
    }
    emitParameterList(node) {
        this.writer.write("[");
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]`);
    }
    emitParameter(node) {
        this.emitIdentifier(node.name);
    }
    emitOneOfList(node) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.emitTokenKind(tokens_1.SyntaxKind.OneKeyword);
        this.writer.write(" ");
        this.emitTokenKind(tokens_1.SyntaxKind.OfKeyword);
        if ((_a = node.terminals) === null || _a === void 0 ? void 0 : _a.length) {
            this.writer.writeln();
            this.writer.indent();
            let maxLength = 1;
            for (const child of node.terminals) {
                const len = (_c = (_b = child.text) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;
                if (len > maxLength)
                    maxLength = len;
            }
            const columnCount = Math.max(1, Math.floor(56 / (maxLength + 2)));
            const columnSizes = Array(columnCount).fill(0);
            // compute line breaks and column widths by prospectively writing out the
            // terminals
            const savedWriter = this.writer;
            this.writer = savedWriter.clone();
            let columnOffset = 0;
            for (const terminal of node.terminals) {
                let startLine = this.writer.line;
                this.beforeEmitNode(terminal);
                if (this.writer.line !== startLine) {
                    startLine = this.writer.line;
                    columnOffset = 0;
                }
                const len = (_e = (_d = terminal.text) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;
                columnSizes[columnOffset] = Math.max(columnSizes[columnOffset], len + 2);
                this.emitNodeCore(terminal);
                this.afterEmitNode(terminal);
                if (this.writer.line > startLine || columnOffset + 1 === columnCount) {
                    this.writer.writeln();
                    columnOffset = 0;
                }
                else {
                    columnOffset++;
                }
            }
            this.writer = savedWriter;
            columnOffset = 0;
            let padding = "";
            for (const terminal of node.terminals) {
                let startLine = this.writer.line;
                this.beforeEmitNode(terminal);
                if (this.writer.line !== startLine) {
                    startLine = this.writer.line;
                    columnOffset = 0;
                }
                else {
                    this.writer.write(padding);
                }
                this.emitNodeCore(terminal);
                this.afterEmitNode(terminal);
                if (this.writer.line > startLine || columnOffset + 1 === columnCount) {
                    this.writer.writeln();
                    padding = "";
                    columnOffset = 0;
                }
                else {
                    const columnSize = columnSizes[columnOffset];
                    const len = ((_g = (_f = terminal.text) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : 0) + 2;
                    padding = " ".repeat((columnSize - len) + 1);
                    columnOffset++;
                }
            }
            this.writer.dedent();
        }
    }
    emitRightHandSideList(node) {
        this.writer.indent();
        if (node.elements) {
            for (const rhs of node.elements) {
                this.writer.writeln();
                this.emitNode(rhs);
            }
        }
        this.writer.dedent();
    }
    emitRightHandSide(node) {
        this.emitChildren(node);
    }
    emitLinkReference(node) {
        this.writer.write(` #`);
        this.writer.write(node.text);
    }
    emitSymbolSpan(node) {
        this.emitNode(node.symbol);
        if (node.next) {
            this.writer.write(" ");
            this.emitNode(node.next);
        }
    }
    emitPlaceholder(node) {
        this.emitTokenKind(tokens_1.SyntaxKind.AtToken);
    }
    emitTerminal(node) {
        this.emitNode(node.literal);
        this.emitNode(node.questionToken);
    }
    emitNonterminal(node) {
        this.emitChildren(node);
    }
    emitArgumentList(node) {
        this.writer.write("[");
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]`);
    }
    emitArgument(node) {
        this.emitToken(node.operatorToken);
        this.emitNode(node.name);
    }
    emitUnicodeCharacterRange(node) {
        this.emitTextContent(node.left);
        this.writer.write(` through `);
        this.emitTextContent(node.right);
    }
    emitUnicodeCharacterLiteral(node) {
        this.emitTextContent(node);
    }
    emitTerminalLiteral(node) {
        var _a;
        if (node.text === "`") {
            this.writer.write("```");
        }
        else {
            this.writer.write("`");
            this.writer.write((_a = node.text) !== null && _a !== void 0 ? _a : "");
            this.writer.write("`");
        }
    }
    emitProse(node) {
        this.writer.write("> ");
        node.fragments && this.emitNodes(node.fragments);
    }
    emitEmptyAssertion(node) {
        this.writer.write("[empty]");
    }
    emitSymbolSet(node) {
        this.writer.write(`{`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`,`);
                }
                this.writer.write(` `);
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(` }`);
    }
    emitLookaheadAssertion(node) {
        var _a, _b;
        this.writer.write(`[`);
        this.emitToken(node.lookaheadKeyword);
        this.writer.write(" ");
        this.emitTokenKind((_b = (_a = node.operatorToken) === null || _a === void 0 ? void 0 : _a.kind) !== null && _b !== void 0 ? _b : tokens_1.SyntaxKind.EqualsToken);
        this.writer.write(" ");
        this.emitNode(node.lookahead);
        this.writer.write(`]`);
    }
    emitLexicalGoalAssertion(node) {
        this.writer.write(`[lexical goal `);
        this.emitNode(node.symbol);
        this.writer.write(`]`);
    }
    emitNoSymbolHereAssertion(node) {
        this.writer.write(`[no `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` or `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
        this.writer.write(` here]`);
    }
    emitConstraints(node) {
        this.writer.write("[");
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write("] ");
    }
    emitProseAssertion(node) {
        this.writer.write(`[> `);
        if (node.fragments) {
            for (const fragment of node.fragments) {
                if (fragment.kind === tokens_1.SyntaxKind.Nonterminal) {
                    this.writer.write(`|`);
                    this.emitNode(fragment);
                    this.writer.write(`|`);
                }
                else {
                    this.emitNode(fragment);
                }
            }
        }
        this.writer.write(`]`);
    }
    emitButNotSymbol(node) {
        this.emitNode(node.left);
        this.writer.write(` but not `);
        this.emitNode(node.right);
    }
    emitOneOfSymbol(node) {
        this.writer.write(`one of `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` or `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
    }
    emitTextContent(node) {
        if (node === null || node === void 0 ? void 0 : node.text) {
            this.writer.write(node.text);
        }
    }
    beforeEmitTrivia(node) {
        if (node.hasPrecedingBlankLine) {
            this.writer.writeBlank();
        }
        else if (node.hasPrecedingLineTerminator) {
            this.writer.writeln();
        }
        else if (node.hasPrecedingWhiteSpace) {
            this.writer.write(" ");
        }
    }
    afterEmitTrivia(node) {
        if (node.hasFollowingBlankLine) {
            this.writer.writeBlank();
        }
        else if (node.hasFollowingLineTerminator) {
            this.writer.writeln();
        }
        else if (node.hasFollowingWhiteSpace) {
            this.writer.write(" ");
        }
    }
    emitSingleLineCommentTrivia(node) {
        this.emitTextRange(node);
        this.writer.writeln();
    }
    emitMultiLineCommentTrivia(node) {
        this.emitTextRange(node);
    }
}
exports.GrammarkdownEmitter = GrammarkdownEmitter;
function isCollapsedProduction(node) {
    return node instanceof nodes_1.Production && node.body instanceof nodes_1.RightHandSide;
}
function areContiguousCollapsedProductions(left, right) {
    return isCollapsedProduction(left) && isCollapsedProduction(right) && left.name.text === right.name.text;
}
//# sourceMappingURL=grammarkdown.js.map