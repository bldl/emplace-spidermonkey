"use strict";
/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlEmitter = void 0;
const emitter_1 = require("./emitter");
const tokens_1 = require("../tokens");
/** {@docCategory Emit} */
class HtmlEmitter extends emitter_1.Emitter {
    constructor() {
        super(...arguments);
        this.extension = ".html";
    }
    emitSourceFile(node) {
        this.writer.write(`<div class="grammar">`);
        this.writer.indent();
        this.writer.writeln();
        super.emitSourceFile(node);
        this.writer.dedent();
        this.writer.writeln();
        this.writer.write(`</div>`);
    }
    emitProduction(node) {
        const linkId = this.resolver.getProductionLinkId(node.name);
        this.emitLinkAnchor(linkId);
        this.writer.write(`<div class="production">`);
        this.writer.indent();
        this.writer.writeln();
        this.writer.write(`<span class="nonterminal">`);
        this.emitIdentifier(node.name);
        this.writer.write(`</span>`);
        this.emitNode(node.parameterList);
        if (node.colonToken) {
            this.writer.write(`<span class="punctuation">`);
            switch (node.colonToken.kind) {
                case tokens_1.SyntaxKind.ColonToken:
                    this.writer.write(` :`);
                    break;
                case tokens_1.SyntaxKind.ColonColonToken:
                    this.writer.write(` ::`);
                    break;
                case tokens_1.SyntaxKind.ColonColonColonToken:
                    this.writer.write(` :::`);
                    break;
            }
            this.writer.write(`</span>`);
        }
        this.writer.writeln();
        this.emitNode(node.body);
        this.writer.dedent();
        this.writer.writeln();
        this.writer.write(`</div>`);
    }
    emitParameterList(node) {
        this.writer.write(`<span class="parameter-list">`);
        this.writer.write(`[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]`);
        this.writer.write(`</span>`);
    }
    emitParameter(node) {
        this.writer.write(`<span class="parameter">`);
        this.emitIdentifier(node.name);
        this.writer.write(`</span>`);
    }
    emitOneOfList(node) {
        this.writer.write(`<span class="keyword">one</span> <span class="keyword">of</span>`);
        this.writer.writeln();
        this.writer.write(`<div class="one-of-list">`);
        if (node.terminals) {
            for (let i = 0; i < node.terminals.length; ++i) {
                if (i > 0) {
                    this.writer.write(` `);
                }
                this.emitTerminalLiteral(node.terminals[i]);
            }
        }
        this.writer.write(`</div>`);
    }
    emitRightHandSideList(node) {
        this.writer.write(`<div class="rhs-list">`);
        this.writer.indent();
        if (node.elements) {
            for (const rhs of node.elements) {
                this.writer.writeln();
                this.writer.write(`<div class="rhs-list-item">`);
                this.writer.indent();
                this.writer.writeln();
                this.emitNode(rhs);
                this.writer.dedent();
                this.writer.writeln();
                this.writer.write(`</div>`);
            }
        }
        this.writer.dedent();
        this.writer.writeln();
        this.writer.write(`</div>`);
    }
    emitRightHandSide(node) {
        const linkId = this.resolver.getRightHandSideLinkId(node, /*includePrefix*/ false);
        this.emitLinkAnchor(linkId);
        this.writer.write(`<span class="rhs">`);
        this.emitNode(node.constraints);
        this.emitNode(node.head);
        this.writer.write(`</span>`);
    }
    emitConstraints(node) {
        this.writer.write(`<span class="constraints">[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]</span>`);
    }
    emitSymbolSpan(node) {
        this.emitNode(node.symbol);
        if (node.next) {
            this.writer.write(` `);
            this.emitNode(node.next);
        }
    }
    emitPlaceholder(node) {
        this.writer.write(`<span class="placeholder">@</span>`);
    }
    emitTerminal(node) {
        this.emitNode(node.literal);
        if (node.questionToken) {
            this.writer.write(`<span class="opt">opt</span>`);
        }
    }
    emitNonterminal(node) {
        const linkId = this.resolver.getProductionLinkId(node.name);
        this.writer.write(`<span class="nonterminal">`);
        this.emitNodeWithLink(node.name, linkId);
        this.writer.write(`</span>`);
        this.emitNode(node.argumentList);
        if (node.questionToken) {
            this.writer.write(`<span class="opt">opt</span>`);
        }
    }
    emitArgumentList(node) {
        this.writer.write(`<span class="argument-list">`);
        this.writer.write(`[`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`, `);
                }
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(`]`);
        this.writer.write(`</span>`);
    }
    emitArgument(node) {
        const parent = this.resolver.getParent(node);
        const className = parent && parent.kind === tokens_1.SyntaxKind.Constraints ? "parameter" : "argument";
        this.writer.write(`<span class="${className}">`);
        this.emitToken(node.operatorToken);
        this.emitNode(node.name);
        this.writer.write(`</span>`);
    }
    emitUnicodeCharacterRange(node) {
        this.writer.write(`<span class="unicode-character-range">`);
        this.emitUnicodeCharacterLiteral(node.left);
        this.writer.write(` <span class="keyword">through</span> `);
        this.emitUnicodeCharacterLiteral(node.right);
        this.writer.write(`</span>`);
    }
    emitUnicodeCharacterLiteral(node) {
        this.writer.write(`<span class="unicode-character-literal">`);
        this.emitTextContent(node);
        this.writer.write(`</span>`);
    }
    emitTerminalLiteral(node) {
        this.writer.write(`<span class="terminal">`);
        this.emitTextContent(node);
        this.writer.write(`</span>`);
    }
    emitProse(node) {
        this.writer.write(`<span class="prose">`);
        if (node.fragments) {
            for (const fragment of node.fragments) {
                this.emitNode(fragment);
            }
        }
        this.writer.write(`</span>`);
    }
    emitEmptyAssertion(node) {
        this.writer.write(`<span class="assertion">[empty]</span>`);
    }
    emitSymbolSet(node) {
        this.writer.write(`{`);
        if (node.elements) {
            for (let i = 0; i < node.elements.length; ++i) {
                if (i > 0) {
                    this.writer.write(`,`);
                }
                this.writer.write(` `);
                this.emitNode(node.elements[i]);
            }
        }
        this.writer.write(` }`);
    }
    emitLookaheadAssertion(node) {
        this.writer.write(`<span class="assertion">[`);
        if (node.operatorToken) {
            switch (node.operatorToken.kind) {
                case tokens_1.SyntaxKind.ExclamationEqualsToken:
                case tokens_1.SyntaxKind.NotEqualToToken:
                    this.writer.write(`<span class="keyword">lookahead</span> ≠ `);
                    break;
                case tokens_1.SyntaxKind.EqualsToken:
                case tokens_1.SyntaxKind.EqualsEqualsToken:
                    this.writer.write(`<span class="keyword">lookahead</span> = `);
                    break;
                case tokens_1.SyntaxKind.LessThanMinusToken:
                case tokens_1.SyntaxKind.ElementOfToken:
                    this.writer.write(`<span class="keyword">lookahead</span> ∈ `);
                    break;
                case tokens_1.SyntaxKind.LessThanExclamationToken:
                case tokens_1.SyntaxKind.NotAnElementOfToken:
                    this.writer.write(`<span class="keyword">lookahead</span> ∉ `);
                    break;
            }
        }
        this.emitNode(node.lookahead);
        this.writer.write(`]</span>`);
    }
    emitLexicalGoalAssertion(node) {
        this.writer.write(`<span class="assertion">[<span class="keyword">lexical</span> </span>goal</span>`);
        const linkId = node.symbol && this.resolver.getProductionLinkId(node.symbol);
        this.emitNodeWithLink(node.symbol, linkId);
        this.writer.write(`</span>`);
    }
    emitNoSymbolHereAssertion(node) {
        this.writer.write(`<span class="assertion">[<span class="keyword">no</span> `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` <span class="keyword">or</span> `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
        this.writer.write(` <span class="keyword">here</span>]</assertion>`);
    }
    emitProseAssertion(node) {
        this.writer.write(`<span class="assertion">[`);
        if (node.fragments) {
            for (const fragment of node.fragments) {
                this.emitNode(fragment);
            }
        }
        this.writer.write(`]</span>`);
    }
    emitButNotSymbol(node) {
        this.emitNode(node.left);
        this.writer.write(` <span class="keyword">but</span> <span class="keyword">not</span> `);
        this.emitNode(node.right);
    }
    emitOneOfSymbol(node) {
        this.writer.write(`<span class="keyword">one</span> <span class="keyword">of</span> `);
        if (node.symbols) {
            for (let i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(` <span class="keyword">or</span> `);
                }
                this.emitNode(node.symbols[i]);
            }
        }
    }
    emitTextContent(node) {
        if (node && node.text) {
            this.writer.write(this.encode(node.text));
        }
    }
    afterEmitNode(node) {
        super.afterEmitNode(node);
        switch (node.kind) {
            case tokens_1.SyntaxKind.RightHandSideList:
            case tokens_1.SyntaxKind.RightHandSide:
            case tokens_1.SyntaxKind.OneOfList:
            case tokens_1.SyntaxKind.Production:
                this.writer.writeln();
                break;
        }
    }
    emitLinkAnchor(linkId) {
        if (linkId && this.options.emitLinks) {
            this.writer.write(`<a name="${linkId}"></a>`);
        }
    }
    emitNodeWithLink(node, linkId) {
        if (linkId && this.options.emitLinks) {
            this.writer.write(`<a href="#${linkId}">`);
            this.emitNode(node);
            this.writer.write(`</a>`);
        }
        else {
            this.emitNode(node);
        }
    }
}
exports.HtmlEmitter = HtmlEmitter;
//# sourceMappingURL=html.js.map