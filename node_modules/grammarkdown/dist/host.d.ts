/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { SourceFile } from "./nodes";
import { Parser } from "./parser";
import { CancelToken } from "@esfx/async-canceltoken";
import { Cancelable } from "@esfx/cancelable";
/**
 * Asynchronously read a file from the host.
 *
 * @param file The resolved path to the file.
 * @param cancelToken An optional `CancelToken` that indicates whether the operation was canceled.
 * @returns A `string` containing the contents of the file, or `undefined` if the file could not be read.
 *
 * {@docCategory Hosts}
 */
export declare type ReadFileCallback = (this: void, file: string, cancelToken?: CancelToken) => PromiseLike<string | undefined> | string | undefined;
/**
 * Asynchronously write a file to the host.
 *
 * @param file The resolved path to the file.
 * @param content The contents of the file.
 * @param cancelToken An optional `CancelToken` that indicates whether the operation was canceled.
 *
 * {@docCategory Hosts}
 */
export declare type WriteFileCallback = (this: void, file: string, content: string, cancelToken?: CancelToken) => PromiseLike<void> | void;
/**
 * Options used to configure a {@link CoreAsyncHost}.
 *
 * {@docCategory Hosts}
 */
export interface CoreAsyncHostOptions {
    /**
     * Indicates whether the host is case-insensitive (`true`) or case-sensitive (`false`).
     */
    ignoreCase?: boolean;
    /**
     * A set of known grammars in the form `{ "name": "path" }`
     */
    knownGrammars?: Record<string, string>;
    /**
     * Indicates whether to include builtin grammars in the set of known grammars.
     */
    useBuiltinGrammars?: boolean;
    /**
     * A callback used to control file normalization when generating keys for maps based on the case sensitivity of the host.
     */
    normalizeFile?: (this: void, file: string, fallback: (file: string) => string) => string;
    /**
     * A callback used to control file resolution.
     */
    resolveFile?: (this: void, file: string, referrer: string | undefined, fallback: (file: string, referrer?: string) => string) => string;
    /**
     * A callback used to control known grammar resolution.
     */
    resolveKnownGrammar?: (this: void, name: string, fallback: (name: string) => string | undefined) => string | undefined;
    /**
     * A callback used to control asynchronous file reads.
     */
    readFile?: (this: void, file: string, cancelToken: CancelToken | undefined, fallback: (file: string, cancelToken?: CancelToken) => Promise<string | undefined>) => PromiseLike<string | undefined> | string | undefined;
    /**
     * A callback used to control asynchronous file writes.
     */
    writeFile?: (this: void, file: string, content: string, cancelToken: CancelToken | undefined, fallback: (file: string, content: string, cancelToken?: CancelToken) => Promise<void>) => PromiseLike<void> | void;
}
/**
 * A Host is a user-provided service that indicates how various Grammarkdown services
 * can interact with a file system. The `CoreAsyncHost` class provides the API surface that Grammarkdown
 * uses to interact with a host that is able to access the file system asynchronously.
 *
 * {@docCategory Hosts}
 */
export declare class CoreAsyncHost {
    private _ignoreCase;
    private _innerParser;
    private _knownGrammars;
    private _useBuiltinGrammars;
    private _normalizeFile;
    private _resolveFile;
    private _resolveKnownGrammar;
    private _readFile;
    private _writeFile;
    private _hostFallback?;
    private _normalizeFileCallback?;
    private _resolveFileCallback?;
    private _resolveKnownGrammarCallback?;
    private _readFileCallback?;
    private _writeFileCallback?;
    /**
     * @param options The options used to configure the host.
     * @param hostFallback An optional host to use as a fallback for operations not supported by this host.
     */
    constructor(options: CoreAsyncHostOptions, hostFallback?: CoreAsyncHost);
    /**
     * Indicates whether comparisons for this host should be case insensitive.
     */
    get ignoreCase(): boolean;
    /**
     * Gets the parser instance associated with this host.
     */
    protected get parser(): Parser;
    /**
     * Creates a {@link StringAsyncHost} for the provided content.
     * @param content The content of the file.
     * @param file The file name for the content.
     * @param hostFallback An optional host to use as a fallback for operations not supported by this host.
     */
    static forFile(content: PromiseLike<string> | string, file?: string, hostFallback?: CoreAsyncHost): StringAsyncHost;
    /**
     * Creates a `CoreAsyncHost`.
     * @param options The options used to configure the host.
     * @param hostFallback An optional host to use as a fallback for operations not supported by this host.
     */
    static from(custom: CoreAsyncHostOptions, hostFallback?: CoreAsyncHost): CoreAsyncHost;
    /**
     * Normalize a file path's string representation for use as a key based on the case sensitivity of the host.
     * @param file The file path.
     */
    normalizeFile(file: string): string;
    /**
     * Returns the path for a known or built-in grammar based on its name (i.e., `"es2015"`, etc.)
     * @param name The name of the grammar.
     */
    resolveKnownGrammar(name: string): string | undefined;
    /**
     * Registers a known grammar for use with `@import` directives.
     * @param name The name for the grammar.
     * @param file The file path of the grammar.
     */
    registerKnownGrammar(name: string, file: string): void;
    /**
     * Resolve the full path of a file relative to the provided referrer.
     * @param file The path to the requested file.
     * @param referrer An optional path indicating the file from which the path should be resolved.
     */
    resolveFile(file: string, referrer?: string): string;
    /**
     * Parse a source file.
     * @param file The path to the source file.
     * @param text The text of the source file.
     * @param cancelable An optional cancelable object that can be used to abort a long-running parse.
     */
    parseSourceFile(file: string, text: string, cancelable?: Cancelable): SourceFile;
    /**
     * Reads a file from the host.
     * @param file The path to the file.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` for either a `string` containing the content if the file could be read, or `undefined` if the file could not be read.
     */
    readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>;
    /**
     * Writes a file to the host.
     * @param file The path to the file.
     * @param text The contents of the file.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` that is settled when the operation completes.
     */
    writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>;
    /**
     * Reads and parses a source file from the host.
     * @param file The path to the file.
     * @param cancelable A cancelable object that can be used to abort the operation.
     * @returns A `Promise` for either the parsed {@link SourceFile} of the file if the file could be read, or `undefined` if it could not be read.
     */
    getSourceFile(file: string, cancelable?: Cancelable): Promise<SourceFile | undefined>;
    /**
     * Creates a {@link Parser} for this host.
     * @virtual
     */
    protected createParser(): Parser;
    /**
     * When overridden in a derived class, normalizes a file path's string representation for use as a key based on the case sensitivity of the host.
     * @param file The file path.
     * @virtual
     */
    protected normalizeFileCore(file: string): string;
    private _normalizeFileFallback;
    /**
     * When overridden in a derived class, resolves the full path of a file relative to the provided referrer.
     * @param file The path to the requested file.
     * @param referrer An optional path indicating the file from which the path should be resolved.
     * @virtual
     */
    protected resolveFileCore(file: string, referrer?: string): string;
    private _resolveFileFallback;
    /**
     * When overridden in a derived class, returns the path for a known or built-in grammar based on its name (i.e., `"es2015"`, etc.)
     * @param name The name of the grammar.
     * @virtual
     */
    protected resolveKnownGrammarCore(name: string): string | undefined;
    private _resolveKnownGrammarFallback;
    /**
     * When overridden in a derived clas, registers a known grammar for use with `@import` directives.
     * @param name The name for the grammar.
     * @param file The file path of the grammar.
     * @virtual
     */
    protected registerKnownGrammarCore(name: string, file: string): void;
    /**
     * When overridden in a derived class, reads a file from the host.
     * @param file The path to the file.
     * @param cancelToken A cancellation token that can be used by the caller to abort the operation.
     * @returns A `Promise` for either a `string` containing the content if the file could be read, or `undefined` if the file could not be read.
     * @virtual
     */
    protected readFileCore(file: string, cancelToken?: CancelToken): Promise<string | undefined>;
    private _readFileFallback;
    /**
     * When overridden in a derived class, writes a file to the host.
     * @param file The path to the file.
     * @param text The contents of the file.
     * @param cancelToken A cancellation token that can be used by the caller to abort the operation.
     * @returns A `Promise` that is settled when the operation completes.
     * @virtual
     */
    protected writeFileCore(file: string, content: string, cancelToken?: CancelToken): Promise<void>;
    private _writeFileFallback;
}
/**
 * An implementation of a {@link CoreAsyncHost} to simplify creating a host for a single file.
 *
 * {@docCategory Hosts}
 */
export declare class StringAsyncHost extends CoreAsyncHost {
    /**
     * The file name for the content.
     */
    readonly file: string;
    /**
     * The content of the file.
     */
    readonly content: PromiseLike<string> | string;
    /**
     * @param file The file name for the content.
     * @param content The content of the file.
     * @param hostFallback An optional host to use as a fallback for operations not supported by this host.
     */
    constructor(file: string, content: PromiseLike<string> | string, hostFallback?: CoreAsyncHost);
}
