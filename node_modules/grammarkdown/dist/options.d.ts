/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
/**
 * Indicates the token to use for line terminators during emit.
 * {@docCategory Compiler}
 */
export declare enum NewLineKind {
    /**
     * Lines should be terminated with a line-feed (Unix-style).
     */
    LineFeed = 0,
    /**
     * Lines should be terminted with a carriage-return followed by a line-feed (DOS-style).
     */
    CarriageReturnLineFeed = 1
}
/**
 * Indicates the emit output format.
 * {@docCategory Compiler}
 */
export declare enum EmitFormat {
    /**
     * Output should be emitted in Markdown format.
     */
    markdown = 0,
    /**
     * Output should be emitted in HTML format.
     */
    html = 1,
    /**
     * Output should be emitted in ECMArkup format.
     */
    ecmarkup = 2
}
/**
 * Options that control the behavior of the compiler.
 * {@docCategory Compiler}
 */
export interface CompilerOptions {
    /**
     * Indicates the token to use for line terminators during emit.
     */
    newLine?: NewLineKind;
    /**
     * Indicates that diagnostics should not be reported.
     */
    noChecks?: boolean;
    /**
     * Indicates that emit output should not be produced.
     */
    noEmit?: boolean;
    /**
     * Indicates that emit output should not be produced if any diagnostics are reported.
     */
    noEmitOnError?: boolean;
    /**
     * Disables strict checking of production parameters.
     */
    noStrictParametricProductions?: boolean;
    /**
     * Indicates that diagnostics should be produced if production parameters are unused.
     */
    noUnusedParameters?: boolean;
    /**
     * Indicates the emit output format.
     */
    format?: EmitFormat;
    /**
     * Indicates the file path for emit output.
     */
    out?: string;
    /**
     * Indicates whether to include hyperlinks in the emit output.
     */
    emitLinks?: boolean;
    /**
     * Indicates whether internal diagnostic information should be reported to the console.
     */
    diagnostics?: boolean;
}
/**
 * Gets the default options for the compiler.
 */
export declare function getDefaultOptions(): CompilerOptions;
export interface KnownOptions {
    [name: string]: Partial<KnownOption>;
}
export interface KnownOption {
    shortName?: string;
    longName: string;
    param?: string;
    type?: string | Map<string, any>;
    many?: boolean;
    description?: string;
    error?: string;
    aliasFor?: string[];
    hidden?: boolean;
    isUsage?: boolean;
    validate?: (key: string, value: string, raw: RawArguments) => boolean;
    convert?: (key: string, value: string, raw: RawArguments) => any;
}
export interface RawArgument {
    rawKey: string;
    formattedKey: string;
    value: any;
    option: KnownOption;
}
export interface RawArguments {
    args: RawArgument[];
    rest: string[];
}
export interface ParsedArguments {
    [key: string]: any;
    argv: string[];
    rest: string[];
}
export declare function parse<T extends ParsedArguments>(options: KnownOptions, args?: string[]): T | undefined;
export declare class UsageWriter {
    private margin;
    private padding;
    private remainder;
    constructor(margin: number, padding: number);
    writeOption(left: string | undefined, right: string | undefined): void;
    writeln(text?: string): void;
    private fit;
}
export declare function usage(options: KnownOptions, margin?: number, printHeader?: (writer: UsageWriter) => void): void;
