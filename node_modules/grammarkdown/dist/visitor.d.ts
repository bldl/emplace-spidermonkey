/*!
 * Copyright (c) 2020 Ron Buckton (rbuckton@chronicles.org)
 *
 * This file is licensed to you under the terms of the MIT License, found in the LICENSE file
 * in the root of this repository or package.
 */
import { TokenKind } from "./tokens";
import { Node, Token, StringLiteral, SourceFile, UnicodeCharacterLiteral, Prose, Identifier, Parameter, ParameterList, OneOfList, Terminal, SymbolSet, InvalidAssertion, EmptyAssertion, LookaheadAssertion, NoSymbolHereAssertion, LexicalGoalAssertion, Constraints, ProseAssertion, ProseFragmentLiteral, Argument, ArgumentList, Nonterminal, OneOfSymbol, PlaceholderSymbol, InvalidSymbol, ButNotSymbol, UnicodeCharacterRange, SymbolSpan, LinkReference, RightHandSide, RightHandSideList, Production, Import, Define, NumberLiteral, Line, TerminalLiteral } from "./nodes";
/** {@docCategory Other} */
export declare abstract class NodeVisitor {
    visit<T extends Node>(node: T): T;
    visit<T extends Node>(node: T | undefined): T | undefined;
    visitEach<T extends Node>(nodes: ReadonlyArray<T>): ReadonlyArray<T>;
    visitEach<T extends Node>(nodes: ReadonlyArray<T> | undefined): ReadonlyArray<T> | undefined;
    visitExtension<T extends Node>(node: T): T;
    visitToken<TKind extends TokenKind>(node: Token<TKind>): Token<TKind>;
    visitStringLiteral(node: StringLiteral): StringLiteral;
    visitNumberLiteral(node: NumberLiteral): NumberLiteral;
    visitIdentifier(node: Identifier): Identifier;
    visitInvalidSymbol(node: InvalidSymbol): InvalidSymbol;
    visitPlaceholderSymbol(node: PlaceholderSymbol): PlaceholderSymbol;
    visitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): UnicodeCharacterLiteral;
    visitUnicodeCharacterRange(node: UnicodeCharacterRange): UnicodeCharacterRange;
    visitButNotSymbol(node: ButNotSymbol): ButNotSymbol;
    visitTerminalLiteral(node: TerminalLiteral): TerminalLiteral;
    visitSymbolSet(node: SymbolSet): SymbolSet;
    visitInvalidAssertion(node: InvalidAssertion): InvalidAssertion;
    visitEmptyAssertion(node: EmptyAssertion): EmptyAssertion;
    visitLookaheadAssertion(node: LookaheadAssertion): LookaheadAssertion;
    visitLexicalGoalAssertion(node: LexicalGoalAssertion): LexicalGoalAssertion;
    visitNoSymbolHereAssertion(node: NoSymbolHereAssertion): NoSymbolHereAssertion;
    visitConstraints(node: Constraints): Constraints;
    visitProseAssertion(node: ProseAssertion): ProseAssertion;
    visitProseFragmentLiteral(node: ProseFragmentLiteral): ProseFragmentLiteral;
    visitArgument(node: Argument): Argument;
    visitArgumentList(node: ArgumentList): ArgumentList;
    visitNonterminal(node: Nonterminal): Nonterminal;
    visitTerminal(node: Terminal): Terminal;
    visitProse(node: Prose): Prose;
    visitOneOfSymbol(node: OneOfSymbol): OneOfSymbol;
    visitSymbolSpan(node: SymbolSpan): SymbolSpan;
    visitLinkReference(node: LinkReference): LinkReference;
    visitRightHandSide(node: RightHandSide): RightHandSide;
    visitRightHandSideList(node: RightHandSideList): RightHandSideList;
    visitOneOfList(node: OneOfList): OneOfList;
    visitParameter(node: Parameter): Parameter;
    visitParameterList(node: ParameterList): ParameterList;
    visitProduction(node: Production): Production;
    visitImport(node: Import): Import;
    visitDefine(node: Define): Define;
    visitLine(node: Line): Line;
    visitSourceFile(node: SourceFile): SourceFile;
}
