"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExpectToken = void 0;
require("./matchers");
function makeExpectToken(navigator) {
    return { firstToken, lastToken, nextToken, prevToken, bof, eof };
    function firstToken(kind, text) {
        try {
            expect(navigator.moveToFirstToken()).toBe(true);
            expectTokenRest(kind, text);
        }
        catch (e) {
            Error.captureStackTrace(e, firstToken);
            throw e;
        }
    }
    function lastToken(kind, text) {
        try {
            expect(navigator.moveToLastToken()).toBe(true);
            expectTokenRest(kind, text);
        }
        catch (e) {
            Error.captureStackTrace(e, lastToken);
            throw e;
        }
    }
    function nextToken(kind, text) {
        try {
            expect(navigator.moveToNextToken()).toBe(true);
            expectTokenRest(kind, text);
        }
        catch (e) {
            Error.captureStackTrace(e, nextToken);
            throw e;
        }
    }
    function prevToken(kind, text) {
        try {
            expect(navigator.moveToPreviousToken()).toBe(true);
            expectTokenRest(kind, text);
        }
        catch (e) {
            Error.captureStackTrace(e, prevToken);
            throw e;
        }
    }
    function bof() {
        try {
            expect(navigator.moveToPreviousToken()).toBe(false);
        }
        catch (e) {
            Error.captureStackTrace(e, bof);
            throw e;
        }
    }
    function eof() {
        try {
            expect(navigator.moveToNextToken()).toBe(false);
        }
        catch (e) {
            Error.captureStackTrace(e, eof);
            throw e;
        }
    }
    function expectTokenRest(kind, text) {
        if (kind !== undefined)
            expect(navigator.getKind()).toBeSyntaxKind(kind);
        if (text !== undefined)
            expect(navigator.getTextContent()).toBe(text);
    }
}
exports.makeExpectToken = makeExpectToken;
//# sourceMappingURL=navigatorUtils.js.map